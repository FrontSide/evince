cut-n-paste/smclient/eggsmclient.c:416:  if (priv->state_file)
cut-n-paste/smclient/eggsmclient.c:417:    return priv->state_file;
cut-n-paste/smclient/eggsmclient.c:424:  priv->state_file = g_key_file_new ();
cut-n-paste/smclient/eggsmclient.c:425:  if (!g_key_file_load_from_file (priv->state_file, state_file_path, 0, &err))
cut-n-paste/smclient/eggsmclient.c:430:      g_key_file_free (priv->state_file);
cut-n-paste/smclient/eggsmclient.c:431:      priv->state_file = NULL;
cut-n-paste/smclient/eggsmclient.c:435:  return priv->state_file;
libmisc/ev-page-action.c:74:	ev_page_action_widget_update_links_model (proxy, page->priv->model);
libmisc/ev-page-action.c:90:						 page->priv->doc_model);
libmisc/ev-page-action.c:107:	if (page->priv->model) {
libmisc/ev-page-action.c:108:		g_object_unref (page->priv->model);
libmisc/ev-page-action.c:109:		page->priv->model = NULL;
libmisc/ev-page-action.c:112:	page->priv->doc_model = NULL;
libmisc/ev-page-action.c:147:		g_value_set_object (value, page->priv->model);
libmisc/ev-page-action.c:162:	if (page->priv->doc_model == model)
libmisc/ev-page-action.c:165:	page->priv->doc_model = model;
libmisc/ev-page-action.c:175:	if (page->priv->model == links_model)
libmisc/ev-page-action.c:178:	if (page->priv->model)
libmisc/ev-page-action.c:179:		g_object_unref (page->priv->model);
libmisc/ev-page-action.c:180:	page->priv->model = g_object_ref (links_model);
libdocument/ev-image.c:46:	if (image->priv->pixbuf) {
libdocument/ev-image.c:47:		g_object_unref (image->priv->pixbuf);
libdocument/ev-image.c:48:		image->priv->pixbuf = NULL;
libdocument/ev-image.c:51:	if (image->priv->tmp_uri) {
libdocument/ev-image.c:54:		filename = g_filename_from_uri (image->priv->tmp_uri, NULL, NULL);
libdocument/ev-image.c:57:		g_free (image->priv->tmp_uri);
libdocument/ev-image.c:58:		image->priv->tmp_uri = NULL;
libdocument/ev-image.c:89:	image->priv->page = page;
libdocument/ev-image.c:90:	image->priv->id = img_id;
libdocument/ev-image.c:103:	image->priv->pixbuf = g_object_ref (pixbuf);
libdocument/ev-image.c:113:	return image->priv->page;
libdocument/ev-image.c:121:	return image->priv->id;
libdocument/ev-image.c:134:	g_return_val_if_fail (GDK_IS_PIXBUF (image->priv->pixbuf), NULL);
libdocument/ev-image.c:136:	return image->priv->pixbuf;
libdocument/ev-image.c:150:	if (image->priv->tmp_uri)
libdocument/ev-image.c:151:		return image->priv->tmp_uri;
libdocument/ev-image.c:162:		image->priv->tmp_uri = g_filename_to_uri (filename, NULL, &error);
libdocument/ev-image.c:163:                if (image->priv->tmp_uri == NULL)
libdocument/ev-image.c:168:		return image->priv->tmp_uri;
libdocument/ev-image.c:186:	return image->priv->tmp_uri;
libdocument/ev-attachment.c:73:	if (attachment->priv->name) {
libdocument/ev-attachment.c:74:		g_free (attachment->priv->name);
libdocument/ev-attachment.c:75:		attachment->priv->name = NULL;
libdocument/ev-attachment.c:78:	if (attachment->priv->description) {
libdocument/ev-attachment.c:79:		g_free (attachment->priv->description);
libdocument/ev-attachment.c:80:		attachment->priv->description = NULL;
libdocument/ev-attachment.c:83:	if (attachment->priv->data) {
libdocument/ev-attachment.c:84:		g_free (attachment->priv->data);
libdocument/ev-attachment.c:85:		attachment->priv->data = NULL;
libdocument/ev-attachment.c:88:	if (attachment->priv->mime_type) {
libdocument/ev-attachment.c:89:		g_free (attachment->priv->mime_type);
libdocument/ev-attachment.c:90:		attachment->priv->mime_type = NULL;
libdocument/ev-attachment.c:93:	if (attachment->priv->app) {
libdocument/ev-attachment.c:94:		g_object_unref (attachment->priv->app);
libdocument/ev-attachment.c:95:		attachment->priv->app = NULL;
libdocument/ev-attachment.c:98:	if (attachment->priv->tmp_file) {
libdocument/ev-attachment.c:99:		ev_tmp_file_unlink (attachment->priv->tmp_file);
libdocument/ev-attachment.c:100:		g_object_unref (attachment->priv->tmp_file);
libdocument/ev-attachment.c:101:		attachment->priv->tmp_file = NULL;
libdocument/ev-attachment.c:117:		attachment->priv->name = g_value_dup_string (value);
libdocument/ev-attachment.c:120:		attachment->priv->description = g_value_dup_string (value);
libdocument/ev-attachment.c:123:		attachment->priv->mtime = g_value_get_ulong (value);
libdocument/ev-attachment.c:126:		attachment->priv->ctime = g_value_get_ulong (value);
libdocument/ev-attachment.c:129:		attachment->priv->size = g_value_get_uint (value);
libdocument/ev-attachment.c:132:		attachment->priv->data = g_value_get_pointer (value);
libdocument/ev-attachment.c:133:		attachment->priv->mime_type = g_content_type_guess (attachment->priv->name,
libdocument/ev-attachment.c:134:								    (guchar *) attachment->priv->data,
libdocument/ev-attachment.c:135:								    attachment->priv->size,
libdocument/ev-attachment.c:220:	attachment->priv->name = NULL;
libdocument/ev-attachment.c:221:	attachment->priv->description = NULL;
libdocument/ev-attachment.c:222:	attachment->priv->data = NULL;
libdocument/ev-attachment.c:223:	attachment->priv->mime_type = NULL;
libdocument/ev-attachment.c:225:	attachment->priv->tmp_file = NULL;
libdocument/ev-attachment.c:255:	return attachment->priv->name;
libdocument/ev-attachment.c:263:	return attachment->priv->description;
libdocument/ev-attachment.c:271:	return attachment->priv->mtime;
libdocument/ev-attachment.c:279:	return attachment->priv->ctime;
libdocument/ev-attachment.c:287:	return attachment->priv->mime_type;
libdocument/ev-attachment.c:321:					       attachment->priv->data,
libdocument/ev-attachment.c:322:					       attachment->priv->size,
libdocument/ev-attachment.c:360:	g_assert (G_IS_FILE (attachment->priv->tmp_file));
libdocument/ev-attachment.c:361:	g_assert (G_IS_APP_INFO (attachment->priv->app));
libdocument/ev-attachment.c:363:	files = g_list_prepend (files, attachment->priv->tmp_file);
libdocument/ev-attachment.c:370:	result = g_app_info_launch (attachment->priv->app, files,
libdocument/ev-attachment.c:380:			     attachment->priv->name,
libdocument/ev-attachment.c:405:	if (!attachment->priv->app) {
libdocument/ev-attachment.c:406:		app_info = g_app_info_get_default_for_type (attachment->priv->mime_type, FALSE);
libdocument/ev-attachment.c:407:		attachment->priv->app = app_info;
libdocument/ev-attachment.c:410:	if (!attachment->priv->app) {
libdocument/ev-attachment.c:415:			     attachment->priv->name);
libdocument/ev-attachment.c:420:	if (attachment->priv->tmp_file) {
libdocument/ev-attachment.c:436:			if (attachment->priv->tmp_file)
libdocument/ev-attachment.c:437:				g_object_unref (attachment->priv->tmp_file);
libdocument/ev-attachment.c:438:			attachment->priv->tmp_file = g_object_ref (file);
libdocument/ev-transition-effect.c:68:		priv->type = g_value_get_enum (value);
libdocument/ev-transition-effect.c:71:		priv->alignment = g_value_get_enum (value);
libdocument/ev-transition-effect.c:74:		priv->direction = g_value_get_enum (value);
libdocument/ev-transition-effect.c:77:		priv->duration = g_value_get_int (value);
libdocument/ev-transition-effect.c:80:		priv->angle = g_value_get_int (value);
libdocument/ev-transition-effect.c:83:		priv->scale = g_value_get_double (value);
libdocument/ev-transition-effect.c:86:		priv->rectangular = g_value_get_boolean (value);
libdocument/ev-transition-effect.c:106:		g_value_set_enum (value, priv->type);
libdocument/ev-transition-effect.c:109:		g_value_set_enum (value, priv->alignment);
libdocument/ev-transition-effect.c:112:		g_value_set_enum (value, priv->direction);
libdocument/ev-transition-effect.c:115:		g_value_set_int (value, priv->duration);
libdocument/ev-transition-effect.c:118:		g_value_set_int (value, priv->angle);
libdocument/ev-transition-effect.c:121:		g_value_set_double (value, priv->scale);
libdocument/ev-transition-effect.c:124:		g_value_set_enum (value, priv->rectangular);
libdocument/ev-transition-effect.c:139:	priv->scale = 1.;
libdocument/ev-document.c:105:	if (document->priv->uri) {
libdocument/ev-document.c:106:		g_free (document->priv->uri);
libdocument/ev-document.c:107:		document->priv->uri = NULL;
libdocument/ev-document.c:110:	if (document->priv->page_sizes) {
libdocument/ev-document.c:111:		g_free (document->priv->page_sizes);
libdocument/ev-document.c:112:		document->priv->page_sizes = NULL;
libdocument/ev-document.c:115:	if (document->priv->page_labels) {
libdocument/ev-document.c:118:		for (i = 0; i < document->priv->n_pages; i++) {
libdocument/ev-document.c:119:			g_free (document->priv->page_labels[i]);
libdocument/ev-document.c:121:		g_free (document->priv->page_labels);
libdocument/ev-document.c:122:		document->priv->page_labels = NULL;
libdocument/ev-document.c:125:	if (document->priv->info) {
libdocument/ev-document.c:126:		ev_document_info_free (document->priv->info);
libdocument/ev-document.c:127:		document->priv->info = NULL;
libdocument/ev-document.c:130:	if (document->priv->synctex_scanner) {
libdocument/ev-document.c:131:		synctex_scanner_free (document->priv->synctex_scanner);
libdocument/ev-document.c:132:		document->priv->synctex_scanner = NULL;
libdocument/ev-document.c:144:	document->priv->uniform = TRUE;
libdocument/ev-document.c:206:	priv->info = _ev_document_get_info (document);
libdocument/ev-document.c:207:        priv->n_pages = _ev_document_get_n_pages (document);
libdocument/ev-document.c:209:        for (i = 0; i < priv->n_pages; i++) {
libdocument/ev-document.c:219:                        priv->uniform_width = page_width;
libdocument/ev-document.c:220:                        priv->uniform_height = page_height;
libdocument/ev-document.c:221:                        priv->max_width = priv->uniform_width;
libdocument/ev-document.c:222:                        priv->max_height = priv->uniform_height;
libdocument/ev-document.c:223:                        priv->min_width = priv->uniform_width;
libdocument/ev-document.c:224:                        priv->min_height = priv->uniform_height;
libdocument/ev-document.c:225:                } else if (priv->uniform &&
libdocument/ev-document.c:226:                            (priv->uniform_width != page_width ||
libdocument/ev-document.c:227:                            priv->uniform_height != page_height)) {
libdocument/ev-document.c:231:                        priv->page_sizes = g_new0 (EvPageSize, priv->n_pages);
libdocument/ev-document.c:234:                                page_size = &(priv->page_sizes[j]);
libdocument/ev-document.c:235:                                page_size->width = priv->uniform_width;
libdocument/ev-document.c:236:                                page_size->height = priv->uniform_height;
libdocument/ev-document.c:238:                        priv->uniform = FALSE;
libdocument/ev-document.c:240:                if (!priv->uniform) {
libdocument/ev-document.c:241:                        page_size = &(priv->page_sizes[i]);
libdocument/ev-document.c:246:                        if (page_width > priv->max_width)
libdocument/ev-document.c:247:                                priv->max_width = page_width;
libdocument/ev-document.c:248:                        if (page_width < priv->min_width)
libdocument/ev-document.c:249:                                priv->min_width = page_width;
libdocument/ev-document.c:251:                        if (page_height > priv->max_height)
libdocument/ev-document.c:252:                                priv->max_height = page_height;
libdocument/ev-document.c:253:                        if (page_height < priv->min_height)
libdocument/ev-document.c:254:                                priv->min_height = page_height;
libdocument/ev-document.c:259:                        if (!priv->page_labels)
libdocument/ev-document.c:260:                                priv->page_labels = g_new0 (gchar *, priv->n_pages);
libdocument/ev-document.c:262:                        priv->page_labels[i] = page_label;
libdocument/ev-document.c:263:                        priv->max_label = MAX (priv->max_label,
libdocument/ev-document.c:282:			priv->synctex_scanner =
libdocument/ev-document.c:331:		document->priv->uri = g_strdup (uri);
libdocument/ev-document.c:422:	document->priv->uri = g_file_get_uri (file);
libdocument/ev-document.c:423:	ev_document_initialize_synctex (document, document->priv->uri);
libdocument/ev-document.c:477:	return document->priv->synctex_scanner != NULL;
libdocument/ev-document.c:506:        scanner = document->priv->synctex_scanner;
libdocument/ev-document.c:551:        scanner = document->priv->synctex_scanner;
libdocument/ev-document.c:590:	return document->priv->n_pages;
libdocument/ev-document.c:618:	g_return_if_fail (page_index >= 0 || page_index < document->priv->n_pages);
libdocument/ev-document.c:621:		*width = document->priv->uniform ?
libdocument/ev-document.c:622:			document->priv->uniform_width :
libdocument/ev-document.c:623:			document->priv->page_sizes[page_index].width;
libdocument/ev-document.c:625:		*height = document->priv->uniform ?
libdocument/ev-document.c:626:			document->priv->uniform_height :
libdocument/ev-document.c:627:			document->priv->page_sizes[page_index].height;
libdocument/ev-document.c:645:	g_return_val_if_fail (page_index >= 0 || page_index < document->priv->n_pages, NULL);
libdocument/ev-document.c:647:	return (document->priv->page_labels && document->priv->page_labels[page_index]) ?
libdocument/ev-document.c:648:		g_strdup (document->priv->page_labels[page_index]) :
libdocument/ev-document.c:665:	return document->priv->info;
libdocument/ev-document.c:729:	return document->priv->uri;
libdocument/ev-document.c:737:	return (document->priv->info->fields_mask & EV_DOCUMENT_INFO_TITLE) ?
libdocument/ev-document.c:738:		document->priv->info->title : NULL;
libdocument/ev-document.c:746:	return document->priv->uniform;
libdocument/ev-document.c:757:		*width = document->priv->max_width;
libdocument/ev-document.c:759:		*height = document->priv->max_height;
libdocument/ev-document.c:770:		*width = document->priv->min_width;
libdocument/ev-document.c:772:		*height = document->priv->min_height;
libdocument/ev-document.c:780:	return (document->priv->max_width > 0 && document->priv->max_height > 0);
libdocument/ev-document.c:788:	return document->priv->max_label;
libdocument/ev-document.c:796:	return document->priv->page_labels != NULL;
libdocument/ev-document.c:814:	for (i = 0; priv->page_labels && i < priv->n_pages; i ++) {
libdocument/ev-document.c:815:		if (priv->page_labels[i] != NULL &&
libdocument/ev-document.c:816:		    ! strcmp (page_label, priv->page_labels[i])) {
libdocument/ev-document.c:823:	for (i = 0; priv->page_labels && i < priv->n_pages; i++) {
libdocument/ev-document.c:824:		if (priv->page_labels[i] != NULL &&
libdocument/ev-document.c:825:		    ! strcasecmp (page_label, priv->page_labels[i])) {
libdocument/ev-document.c:839:		if (page >= 0 && page < priv->n_pages) {
libdocument/ev-link-dest.c:79:	return self->priv->type;
libdocument/ev-link-dest.c:87:	return self->priv->page;
libdocument/ev-link-dest.c:97:		*change_top = (self->priv->change & EV_DEST_CHANGE_TOP);
libdocument/ev-link-dest.c:99:	return self->priv->top;
libdocument/ev-link-dest.c:109:		*change_left = (self->priv->change & EV_DEST_CHANGE_LEFT);
libdocument/ev-link-dest.c:111:	return self->priv->left;
libdocument/ev-link-dest.c:119:	return self->priv->bottom;
libdocument/ev-link-dest.c:127:	return self->priv->right;
libdocument/ev-link-dest.c:137:		*change_zoom = (self->priv->change & EV_DEST_CHANGE_ZOOM);
libdocument/ev-link-dest.c:139:	return self->priv->zoom;
libdocument/ev-link-dest.c:147:	return self->priv->named;
libdocument/ev-link-dest.c:155:	return self->priv->page_label;
libdocument/ev-link-dest.c:170:			g_value_set_enum (value, self->priv->type);
libdocument/ev-link-dest.c:173:			g_value_set_int (value, self->priv->page);
libdocument/ev-link-dest.c:176:			g_value_set_double (value, self->priv->top);
libdocument/ev-link-dest.c:179:			g_value_set_double (value, self->priv->left);
libdocument/ev-link-dest.c:182:			g_value_set_double (value, self->priv->bottom);
libdocument/ev-link-dest.c:185:			g_value_set_double (value, self->priv->left);
libdocument/ev-link-dest.c:188:			g_value_set_double (value, self->priv->zoom);
libdocument/ev-link-dest.c:191:			g_value_set_uint (value, self->priv->change);
libdocument/ev-link-dest.c:194:			g_value_set_string (value, self->priv->named);
libdocument/ev-link-dest.c:197:			g_value_set_string (value, self->priv->page_label);
libdocument/ev-link-dest.c:217:			self->priv->type = g_value_get_enum (value);
libdocument/ev-link-dest.c:220:			self->priv->page = g_value_get_int (value);
libdocument/ev-link-dest.c:223:			self->priv->top = g_value_get_double (value);
libdocument/ev-link-dest.c:226:			self->priv->left = g_value_get_double (value);
libdocument/ev-link-dest.c:229:			self->priv->bottom = g_value_get_double (value);
libdocument/ev-link-dest.c:232:			self->priv->right = g_value_get_double (value);
libdocument/ev-link-dest.c:235:			self->priv->zoom = g_value_get_double (value);
libdocument/ev-link-dest.c:238:			self->priv->change = g_value_get_uint (value);
libdocument/ev-link-dest.c:241:			self->priv->named = g_value_dup_string (value);
libdocument/ev-link-dest.c:244:			self->priv->page_label = g_value_dup_string (value);
libdocument/ev-link-dest.c:261:	if (priv->named) {
libdocument/ev-link-dest.c:262:		g_free (priv->named);
libdocument/ev-link-dest.c:263:		priv->named = NULL;
libdocument/ev-link-dest.c:265:	if (priv->page_label) {
libdocument/ev-link-dest.c:266:		g_free (priv->page_label);
libdocument/ev-link-dest.c:267:		priv->page_label = NULL;
libdocument/ev-link-dest.c:278:	ev_link_dest->priv->named = NULL;
libdocument/ev-link-dest.c:544:        if (a->priv->type != b->priv->type)
libdocument/ev-link-dest.c:547:        switch (a->priv->type) {
libdocument/ev-link-dest.c:549:                return a->priv->page == b->priv->page;
libdocument/ev-link-dest.c:552:                return a->priv->page == b->priv->page &&
libdocument/ev-link-dest.c:553:                        a->priv->left == b->priv->left &&
libdocument/ev-link-dest.c:554:                        a->priv->top == b->priv->top &&
libdocument/ev-link-dest.c:555:                        a->priv->zoom == b->priv->zoom &&
libdocument/ev-link-dest.c:556:                        a->priv->change == b->priv->change;
libdocument/ev-link-dest.c:559:                return a->priv->page == b->priv->page;
libdocument/ev-link-dest.c:562:                return a->priv->page == b->priv->page &&
libdocument/ev-link-dest.c:563:                        a->priv->top == b->priv->top &&
libdocument/ev-link-dest.c:564:                        a->priv->change == b->priv->change;
libdocument/ev-link-dest.c:567:                return a->priv->page == b->priv->page &&
libdocument/ev-link-dest.c:568:                        a->priv->left == b->priv->left &&
libdocument/ev-link-dest.c:569:                        a->priv->change == b->priv->change;
libdocument/ev-link-dest.c:572:                return a->priv->page == b->priv->page &&
libdocument/ev-link-dest.c:573:                        a->priv->left == b->priv->left &&
libdocument/ev-link-dest.c:574:                        a->priv->top == b->priv->top &&
libdocument/ev-link-dest.c:575:                        a->priv->right == b->priv->right &&
libdocument/ev-link-dest.c:576:                        a->priv->bottom == b->priv->bottom &&
libdocument/ev-link-dest.c:577:                        a->priv->change == b->priv->change;
libdocument/ev-link-dest.c:580:                return !g_strcmp0 (a->priv->named, b->priv->named);
libdocument/ev-link-dest.c:583:                return !g_strcmp0 (a->priv->page_label, b->priv->page_label);
libdocument/ev-layer.c:55:	layer->priv->is_parent = is_parent;
libdocument/ev-layer.c:56:	layer->priv->rb_group = rb_group;
libdocument/ev-layer.c:66:	return layer->priv->is_parent;
libdocument/ev-layer.c:74:	return layer->priv->rb_group;
libdocument/ev-link.c:54:	return self->priv->title;
libdocument/ev-link.c:68:	return self->priv->action;
libdocument/ev-link.c:83:			g_value_set_string (value, self->priv->title);
libdocument/ev-link.c:86:			g_value_set_object (value, self->priv->action);
libdocument/ev-link.c:106:			self->priv->title = g_value_dup_string (value);	
libdocument/ev-link.c:109:			self->priv->action = g_value_dup_object (value);
libdocument/ev-link.c:126:	if (priv->title) {
libdocument/ev-link.c:127:		g_free (priv->title);
libdocument/ev-link.c:128:		priv->title = NULL;
libdocument/ev-link.c:131:	g_clear_object (&priv->action);
libdocument/ev-link.c:141:	ev_link->priv->title = NULL;
libdocument/ev-link.c:142:	ev_link->priv->action = NULL;
libdocument/ev-link-action.c:70:	return self->priv->type;
libdocument/ev-link-action.c:84:	return self->priv->dest;
libdocument/ev-link-action.c:92:	return self->priv->uri;
libdocument/ev-link-action.c:100:	return self->priv->filename;
libdocument/ev-link-action.c:108:	return self->priv->params;
libdocument/ev-link-action.c:116:	return self->priv->name;
libdocument/ev-link-action.c:130:	return self->priv->show_list;
libdocument/ev-link-action.c:144:	return self->priv->hide_list;
libdocument/ev-link-action.c:158:	return self->priv->toggle_list;
libdocument/ev-link-action.c:173:		        g_value_set_enum (value, self->priv->type);
libdocument/ev-link-action.c:176:		        g_value_set_object (value, self->priv->dest);
libdocument/ev-link-action.c:179:			g_value_set_string (value, self->priv->uri);
libdocument/ev-link-action.c:182:			g_value_set_string (value, self->priv->filename);
libdocument/ev-link-action.c:185:			g_value_set_string (value, self->priv->params);
libdocument/ev-link-action.c:188:			g_value_set_string (value, self->priv->name);
libdocument/ev-link-action.c:191:			g_value_set_pointer (value, self->priv->show_list);
libdocument/ev-link-action.c:194:			g_value_set_pointer (value, self->priv->hide_list);
libdocument/ev-link-action.c:197:			g_value_set_pointer (value, self->priv->toggle_list);
libdocument/ev-link-action.c:217:			self->priv->type = g_value_get_enum (value);
libdocument/ev-link-action.c:220:			self->priv->dest = g_value_dup_object (value);
libdocument/ev-link-action.c:223:			g_free (self->priv->uri);
libdocument/ev-link-action.c:224:			self->priv->uri = g_value_dup_string (value);
libdocument/ev-link-action.c:227:			g_free (self->priv->filename);
libdocument/ev-link-action.c:228:			self->priv->filename = g_value_dup_string (value);
libdocument/ev-link-action.c:231:			g_free (self->priv->params);
libdocument/ev-link-action.c:232:			self->priv->params = g_value_dup_string (value);
libdocument/ev-link-action.c:235:			g_free (self->priv->name);
libdocument/ev-link-action.c:236:			self->priv->name = g_value_dup_string (value);
libdocument/ev-link-action.c:239:			self->priv->show_list = g_value_get_pointer (value);
libdocument/ev-link-action.c:242:			self->priv->hide_list = g_value_get_pointer (value);
libdocument/ev-link-action.c:245:			self->priv->toggle_list = g_value_get_pointer (value);
libdocument/ev-link-action.c:262:	g_clear_object (&priv->dest);
libdocument/ev-link-action.c:264:	if (priv->uri) {
libdocument/ev-link-action.c:265:		g_free (priv->uri);
libdocument/ev-link-action.c:266:		priv->uri = NULL;
libdocument/ev-link-action.c:269:	if (priv->filename) {
libdocument/ev-link-action.c:270:		g_free (priv->filename);
libdocument/ev-link-action.c:271:		priv->filename = NULL;
libdocument/ev-link-action.c:274:	if (priv->params) {
libdocument/ev-link-action.c:275:		g_free (priv->params);
libdocument/ev-link-action.c:276:		priv->params = NULL;
libdocument/ev-link-action.c:279:	if (priv->name) {
libdocument/ev-link-action.c:280:		g_free (priv->name);
libdocument/ev-link-action.c:281:		priv->name = NULL;
libdocument/ev-link-action.c:284:	if (priv->show_list) {
libdocument/ev-link-action.c:285:		g_list_foreach (priv->show_list, (GFunc)g_object_unref, NULL);
libdocument/ev-link-action.c:286:		g_list_free (priv->show_list);
libdocument/ev-link-action.c:287:		priv->show_list = NULL;
libdocument/ev-link-action.c:290:	if (priv->hide_list) {
libdocument/ev-link-action.c:291:		g_list_foreach (priv->hide_list, (GFunc)g_object_unref, NULL);
libdocument/ev-link-action.c:292:		g_list_free (priv->hide_list);
libdocument/ev-link-action.c:293:		priv->hide_list = NULL;
libdocument/ev-link-action.c:296:	if (priv->toggle_list) {
libdocument/ev-link-action.c:297:		g_list_foreach (priv->toggle_list, (GFunc)g_object_unref, NULL);
libdocument/ev-link-action.c:298:		g_list_free (priv->toggle_list);
libdocument/ev-link-action.c:299:		priv->toggle_list = NULL;
libdocument/ev-link-action.c:310:	ev_link_action->priv->dest = NULL;
libdocument/ev-link-action.c:311:	ev_link_action->priv->uri = NULL;
libdocument/ev-link-action.c:312:	ev_link_action->priv->filename = NULL;
libdocument/ev-link-action.c:313:	ev_link_action->priv->params = NULL;
libdocument/ev-link-action.c:314:	ev_link_action->priv->name = NULL;
libdocument/ev-link-action.c:503:        if (a->priv->type != b->priv->type)
libdocument/ev-link-action.c:506:        switch (a->priv->type) {
libdocument/ev-link-action.c:508:                return ev_link_dest_equal (a->priv->dest, b->priv->dest);
libdocument/ev-link-action.c:511:                return ev_link_dest_equal (a->priv->dest, b->priv->dest) &&
libdocument/ev-link-action.c:512:                        !g_strcmp0 (a->priv->filename, b->priv->filename);
libdocument/ev-link-action.c:515:                return !g_strcmp0 (a->priv->uri, b->priv->uri);
libdocument/ev-link-action.c:518:                return !g_strcmp0 (a->priv->filename, b->priv->filename) &&
libdocument/ev-link-action.c:519:                        !g_strcmp0 (a->priv->params, b->priv->params);
libdocument/ev-link-action.c:522:                return !g_strcmp0 (a->priv->name, b->priv->name);
libview/ev-link-accessible.c:66:        action = ev_link_get_action (impl_priv->link);
libview/ev-link-accessible.c:107:        widget = gtk_accessible_get_widget (GTK_ACCESSIBLE (impl_priv->view));
libview/ev-link-accessible.c:126:                if (c_x >= impl_priv->area.x1 && c_x <= impl_priv->area.x2 &&
libview/ev-link-accessible.c:127:                    c_y >= impl_priv->area.y1 && c_y <= impl_priv->area.y2)
libview/ev-link-accessible.c:149:        widget = gtk_accessible_get_widget (GTK_ACCESSIBLE (impl_priv->view));
libview/ev-link-accessible.c:168:                if (c_x >= impl_priv->area.x1 && c_x <= impl_priv->area.x2 &&
libview/ev-link-accessible.c:169:                    c_y >= impl_priv->area.y1 && c_y <= impl_priv->area.y2)
libview/ev-link-accessible.c:206:        g_clear_object (&link->priv->hyperlink);
libview/ev-link-accessible.c:232:        if (link->priv->hyperlink)
libview/ev-link-accessible.c:233:                return ATK_HYPERLINK (link->priv->hyperlink);
libview/ev-link-accessible.c:235:        link->priv->hyperlink = g_object_new (EV_TYPE_HYPERLINK, NULL);
libview/ev-link-accessible.c:237:        link->priv->hyperlink->link_impl = link;
libview/ev-link-accessible.c:238:        g_object_add_weak_pointer (G_OBJECT (link), (gpointer *)&link->priv->hyperlink->link_impl);
libview/ev-link-accessible.c:240:        return ATK_HYPERLINK (link->priv->hyperlink);
libview/ev-link-accessible.c:256:	widget = gtk_accessible_get_widget (GTK_ACCESSIBLE (priv->view));
libview/ev-link-accessible.c:261:	if (!ev_link_get_action (priv->link))
libview/ev-link-accessible.c:264:	ev_view_handle_link (EV_VIEW (widget), priv->link);
libview/ev-link-accessible.c:307:        atk_link->priv->view = view;
libview/ev-link-accessible.c:308:        atk_link->priv->link = g_object_ref (link);
libview/ev-link-accessible.c:309:        atk_link->priv->area = *area;
libview/ev-transition-animation.c:66:		if (priv->effect)
libview/ev-transition-animation.c:67:			g_object_unref (priv->effect);
libview/ev-transition-animation.c:69:		priv->effect = g_value_dup_object (value);
libview/ev-transition-animation.c:96:		g_value_set_object (value, priv->effect);
libview/ev-transition-animation.c:99:		g_value_set_pointer (value, priv->origin_surface);
libview/ev-transition-animation.c:102:		g_value_set_pointer (value, priv->dest_surface);
libview/ev-transition-animation.c:116:	if (priv->effect)
libview/ev-transition-animation.c:117:		g_object_unref (priv->effect);
libview/ev-transition-animation.c:119:	if (priv->origin_surface)
libview/ev-transition-animation.c:120:		cairo_surface_destroy (priv->origin_surface);
libview/ev-transition-animation.c:122:	if (priv->dest_surface)
libview/ev-transition-animation.c:123:		cairo_surface_destroy (priv->dest_surface);
libview/ev-transition-animation.c:143:	effect = priv->effect;
libview/ev-transition-animation.c:233:		paint_surface (cr, priv->dest_surface, 0, 0, 1., page_area);
libview/ev-transition-animation.c:251:		paint_surface (cr, priv->origin_surface, 0, 0, 1., page_area);
libview/ev-transition-animation.c:253:		paint_surface (cr, priv->origin_surface, 0, 0, 1., page_area);
libview/ev-transition-animation.c:271:		paint_surface (cr, priv->dest_surface, 0, 0, 1., page_area);
libview/ev-transition-animation.c:294:	paint_surface (cr, priv->origin_surface, 0, 0, 1., page_area);
libview/ev-transition-animation.c:314:		paint_surface (cr, priv->dest_surface, 0, 0, 1., page_area);
libview/ev-transition-animation.c:339:		paint_surface (cr, priv->dest_surface, 0, 0, 1., page_area);
libview/ev-transition-animation.c:348:		paint_surface (cr, priv->origin_surface, 0, 0, 1., page_area);
libview/ev-transition-animation.c:350:		paint_surface (cr, priv->origin_surface, 0, 0, 1., page_area);
libview/ev-transition-animation.c:359:		paint_surface (cr, priv->dest_surface, 0, 0, 1., page_area);
libview/ev-transition-animation.c:382:	paint_surface (cr, priv->origin_surface, 0, 0, 1., page_area);
libview/ev-transition-animation.c:414:	paint_surface (cr, priv->dest_surface, 0, 0, 1., page_area);
libview/ev-transition-animation.c:428:	paint_surface (cr, priv->dest_surface, 0, 0, 1., page_area);
libview/ev-transition-animation.c:429:	paint_surface (cr, priv->origin_surface, 0, 0, 1 - progress, page_area);
libview/ev-transition-animation.c:453:		paint_surface (cr, priv->origin_surface, - (width * progress), 0, 1., page_area);
libview/ev-transition-animation.c:454:		paint_surface (cr, priv->dest_surface, width * (1 - progress), 0, 1., page_area);
libview/ev-transition-animation.c:457:		paint_surface (cr, priv->origin_surface, 0, - (height * progress), 1., page_area);
libview/ev-transition-animation.c:458:		paint_surface (cr, priv->dest_surface, 0, height * (1 - progress), 1., page_area);
libview/ev-transition-animation.c:481:	paint_surface (cr, priv->origin_surface, 0, 0, 1., page_area);
libview/ev-transition-animation.c:485:		paint_surface (cr, priv->dest_surface, width * (1 - progress), 0, 1., page_area);
libview/ev-transition-animation.c:488:		paint_surface (cr, priv->dest_surface, 0, height * (1 - progress), 1., page_area);
libview/ev-transition-animation.c:511:	paint_surface (cr, priv->dest_surface, 0, 0, 1., page_area);
libview/ev-transition-animation.c:515:		paint_surface (cr, priv->origin_surface, - (width * progress), 0, 1., page_area);
libview/ev-transition-animation.c:518:		paint_surface (cr, priv->origin_surface, 0, - (height * progress), 1., page_area);
libview/ev-transition-animation.c:533:	paint_surface (cr, priv->origin_surface, 0, 0, 1., page_area);
libview/ev-transition-animation.c:534:	paint_surface (cr, priv->dest_surface, 0, 0, progress, page_area);
libview/ev-transition-animation.c:550:	if (!priv->dest_surface) {
libview/ev-transition-animation.c:552:		paint_surface (cr, priv->origin_surface, 0, 0, 1., page_area);
libview/ev-transition-animation.c:556:	g_object_get (priv->effect, "type", &type, NULL);
libview/ev-transition-animation.c:562:		paint_surface (cr, priv->dest_surface, 0, 0, 1., page_area);
libview/ev-transition-animation.c:565:		ev_transition_animation_split (cr, animation, priv->effect, progress, page_area);
libview/ev-transition-animation.c:568:		ev_transition_animation_blinds (cr, animation, priv->effect, progress, page_area);
libview/ev-transition-animation.c:571:		ev_transition_animation_box (cr, animation, priv->effect, progress, page_area);
libview/ev-transition-animation.c:574:		ev_transition_animation_wipe (cr, animation, priv->effect, progress, page_area);
libview/ev-transition-animation.c:577:		ev_transition_animation_dissolve (cr, animation, priv->effect, progress, page_area);
libview/ev-transition-animation.c:580:		ev_transition_animation_push (cr, animation, priv->effect, progress, page_area);
libview/ev-transition-animation.c:583:		ev_transition_animation_cover (cr, animation, priv->effect, progress, page_area);
libview/ev-transition-animation.c:586:		ev_transition_animation_uncover (cr, animation, priv->effect, progress, page_area);
libview/ev-transition-animation.c:589:		ev_transition_animation_fade (cr, animation, priv->effect, progress, page_area);
libview/ev-transition-animation.c:602:		paint_surface (cr, priv->dest_surface, 0, 0, 1., page_area);
libview/ev-transition-animation.c:628:	if (priv->origin_surface == origin_surface)
libview/ev-transition-animation.c:633:	if (priv->origin_surface)
libview/ev-transition-animation.c:634:		cairo_surface_destroy (priv->origin_surface);
libview/ev-transition-animation.c:636:	priv->origin_surface = surface;
libview/ev-transition-animation.c:639:	if (priv->origin_surface && priv->dest_surface)
libview/ev-transition-animation.c:654:	if (priv->dest_surface == dest_surface)
libview/ev-transition-animation.c:659:	if (priv->dest_surface)
libview/ev-transition-animation.c:660:		cairo_surface_destroy (priv->dest_surface);
libview/ev-transition-animation.c:662:	priv->dest_surface = surface;
libview/ev-transition-animation.c:665:	if (priv->origin_surface && priv->dest_surface)
libview/ev-transition-animation.c:678:	return (priv->origin_surface != NULL);
libview/ev-timeline.c:72:	priv->fps = DEFAULT_FPS;
libview/ev-timeline.c:73:	priv->duration = 0;
libview/ev-timeline.c:115:		g_value_set_uint (value, priv->fps);
libview/ev-timeline.c:118:		g_value_set_uint (value, priv->duration);
libview/ev-timeline.c:121:		g_value_set_boolean (value, priv->loop);
libview/ev-timeline.c:135:	if (priv->source_id) {
libview/ev-timeline.c:136:		g_source_remove (priv->source_id);
libview/ev-timeline.c:137:		priv->source_id = 0;
libview/ev-timeline.c:140:	if (priv->timer)
libview/ev-timeline.c:141:		g_timer_destroy (priv->timer);
libview/ev-timeline.c:157:	elapsed_time = (guint) (g_timer_elapsed (priv->timer, NULL) * 1000);
libview/ev-timeline.c:158:	progress = (gdouble) elapsed_time / priv->duration;
libview/ev-timeline.c:164:		if (!priv->loop) {
libview/ev-timeline.c:165:			if (priv->source_id) {
libview/ev-timeline.c:166:				g_source_remove (priv->source_id);
libview/ev-timeline.c:167:				priv->source_id = 0;
libview/ev-timeline.c:189:	if (!priv->source_id) {
libview/ev-timeline.c:190:		if (priv->timer)
libview/ev-timeline.c:191:			g_timer_continue (priv->timer);
libview/ev-timeline.c:193:			priv->timer = g_timer_new ();
libview/ev-timeline.c:196:		g_assert (priv->fps > 0);
libview/ev-timeline.c:200:		priv->source_id = g_timeout_add (FRAME_INTERVAL (priv->fps),
libview/ev-timeline.c:310:	if (priv->source_id) {
libview/ev-timeline.c:311:		g_source_remove (priv->source_id);
libview/ev-timeline.c:312:		priv->source_id = 0;
libview/ev-timeline.c:313:		g_timer_stop (priv->timer);
libview/ev-timeline.c:328:	if (priv->timer) {
libview/ev-timeline.c:329:		g_timer_destroy (priv->timer);
libview/ev-timeline.c:332:			priv->timer = g_timer_new ();
libview/ev-timeline.c:334:			priv->timer = NULL;
libview/ev-timeline.c:347:	return (priv->source_id != 0);
libview/ev-timeline.c:358:	return priv->fps;
libview/ev-timeline.c:371:	priv->fps = fps;
libview/ev-timeline.c:374:		g_source_remove (priv->source_id);
libview/ev-timeline.c:375:		priv->source_id = g_timeout_add (FRAME_INTERVAL (priv->fps),
libview/ev-timeline.c:391:	return priv->loop;
libview/ev-timeline.c:403:	priv->loop = loop;
libview/ev-timeline.c:418:	priv->duration = duration;
libview/ev-timeline.c:432:	return priv->duration;
libview/ev-timeline.c:446:	if (!priv->timer)
libview/ev-timeline.c:449:	elapsed_time = (guint) (g_timer_elapsed (priv->timer, NULL) * 1000);
libview/ev-timeline.c:450:	progress = (gdouble) elapsed_time / priv->duration;
libview/ev-view-accessible.c:83:	g_clear_object (&priv->buffer);
libview/ev-view-accessible.c:84:	g_clear_pointer (&priv->links, (GDestroyNotify)g_hash_table_destroy);
libview/ev-view-accessible.c:93:	if (priv->model) {
libview/ev-view-accessible.c:94:		g_signal_handlers_disconnect_by_data (priv->model, object);
libview/ev-view-accessible.c:95:		g_object_unref (priv->model);
libview/ev-view-accessible.c:96:		priv->model = NULL;
libview/ev-view-accessible.c:98:	if (priv->action_idle_handler)
libview/ev-view-accessible.c:99:		g_source_remove (priv->action_idle_handler);
libview/ev-view-accessible.c:101:		g_free (priv->action_descriptions [i]);
libview/ev-view-accessible.c:145:	if (priv->buffer) {
libview/ev-view-accessible.c:146:		return priv->buffer;
libview/ev-view-accessible.c:154:	priv->buffer = gtk_text_buffer_new (NULL);
libview/ev-view-accessible.c:157:		gtk_text_buffer_set_text (priv->buffer, retval, -1);
libview/ev-view-accessible.c:159:	return priv->buffer;
libview/ev-view-accessible.c:881:	                priv->idle_scroll,
libview/ev-view-accessible.c:883:	priv->action_idle_handler = 0;
libview/ev-view-accessible.c:896:	if (priv->action_idle_handler)
libview/ev-view-accessible.c:901:		priv->idle_scroll = GTK_SCROLL_PAGE_BACKWARD;
libview/ev-view-accessible.c:904:		priv->idle_scroll = GTK_SCROLL_PAGE_FORWARD;
libview/ev-view-accessible.c:909:	priv->action_idle_handler = g_idle_add (ev_view_accessible_idle_do_action,
libview/ev-view-accessible.c:929:	if (priv->action_descriptions[i])
libview/ev-view-accessible.c:930:		return priv->action_descriptions[i];
libview/ev-view-accessible.c:956:	old_description = priv->action_descriptions[i];
libview/ev-view-accessible.c:957:	priv->action_descriptions[i] = g_strdup (description);
libview/ev-view-accessible.c:979:	if (priv->links)
libview/ev-view-accessible.c:980:		return priv->links;
libview/ev-view-accessible.c:982:	priv->links = g_hash_table_new_full (g_direct_hash,
libview/ev-view-accessible.c:986:	return priv->links;
libview/ev-view-accessible.c:1125:	if (priv->model == model)
libview/ev-view-accessible.c:1128:	if (priv->model) {
libview/ev-view-accessible.c:1129:		g_signal_handlers_disconnect_by_data (priv->model, accessible);
libview/ev-view-accessible.c:1130:		g_object_unref (priv->model);
libview/ev-view-accessible.c:1133:	priv->model = g_object_ref (model);
libview/ev-view-accessible.c:1135:	g_signal_connect (priv->model, "page-changed",
libview/ev-view-accessible.c:1138:	g_signal_connect (priv->model, "notify::document",
shell/ev-sidebar.c:71:	if (ev_sidebar->priv->menu) {
shell/ev-sidebar.c:72:		gtk_menu_detach (GTK_MENU (ev_sidebar->priv->menu));
shell/ev-sidebar.c:73:		ev_sidebar->priv->menu = NULL;
shell/ev-sidebar.c:76:	if (ev_sidebar->priv->page_model) {
shell/ev-sidebar.c:77:		g_object_unref (ev_sidebar->priv->page_model);
shell/ev-sidebar.c:78:		ev_sidebar->priv->page_model = NULL;
shell/ev-sidebar.c:91:	gtk_tree_model_get (ev_sidebar->priv->page_model, iter,
shell/ev-sidebar.c:96:	gtk_notebook_set_current_page (GTK_NOTEBOOK (ev_sidebar->priv->notebook), index);
shell/ev-sidebar.c:97:	gtk_label_set_text (GTK_LABEL (ev_sidebar->priv->label), title);
shell/ev-sidebar.c:109:	valid = gtk_tree_model_get_iter_first (ev_sidebar->priv->page_model, &iter);
shell/ev-sidebar.c:114:		gtk_tree_model_get (ev_sidebar->priv->page_model, &iter,
shell/ev-sidebar.c:122:			valid = gtk_tree_model_iter_next (ev_sidebar->priv->page_model, &iter);
shell/ev-sidebar.c:151:	GtkNotebook *notebook = GTK_NOTEBOOK (sidebar->priv->notebook);
shell/ev-sidebar.c:234:		gtk_widget_set_size_request (ev_sidebar->priv->menu, -1, -1);
shell/ev-sidebar.c:235:                gtk_widget_get_preferred_size (ev_sidebar->priv->menu, &requisition, NULL);
shell/ev-sidebar.c:236:		gtk_widget_set_size_request (ev_sidebar->priv->menu,
shell/ev-sidebar.c:242:		gtk_menu_popup (GTK_MENU (ev_sidebar->priv->menu),
shell/ev-sidebar.c:264:		gtk_menu_popup (GTK_MENU (ev_sidebar->priv->menu),
shell/ev-sidebar.c:299:	ev_sidebar->priv->menu = NULL;
shell/ev-sidebar.c:311:	menu_item = gtk_menu_get_active (GTK_MENU (ev_sidebar->priv->menu));
shell/ev-sidebar.c:312:	valid = gtk_tree_model_get_iter_first (ev_sidebar->priv->page_model, &iter);
shell/ev-sidebar.c:315:		gtk_tree_model_get (ev_sidebar->priv->page_model, &iter,
shell/ev-sidebar.c:323:			valid = gtk_tree_model_iter_next (ev_sidebar->priv->page_model, &iter);
shell/ev-sidebar.c:343:	ev_sidebar->priv->page_model = (GtkTreeModel *)
shell/ev-sidebar.c:352:	ev_sidebar->priv->hbox = hbox;
shell/ev-sidebar.c:356:	ev_sidebar->priv->select_button = gtk_toggle_button_new ();
shell/ev-sidebar.c:357:	gtk_button_set_relief (GTK_BUTTON (ev_sidebar->priv->select_button), GTK_RELIEF_NONE);
shell/ev-sidebar.c:358:	g_signal_connect (ev_sidebar->priv->select_button, "button_press_event",
shell/ev-sidebar.c:361:	g_signal_connect (ev_sidebar->priv->select_button, "key_press_event",
shell/ev-sidebar.c:367:	ev_sidebar->priv->label = gtk_label_new ("");
shell/ev-sidebar.c:369:			    ev_sidebar->priv->label,
shell/ev-sidebar.c:371:	gtk_widget_show (ev_sidebar->priv->label);
shell/ev-sidebar.c:377:	gtk_container_add (GTK_CONTAINER (ev_sidebar->priv->select_button), select_hbox);
shell/ev-sidebar.c:380:	gtk_box_pack_start (GTK_BOX (hbox), ev_sidebar->priv->select_button, TRUE, TRUE, 0);
shell/ev-sidebar.c:381:	gtk_widget_show (ev_sidebar->priv->select_button);
shell/ev-sidebar.c:397:	ev_sidebar->priv->menu = gtk_menu_new ();
shell/ev-sidebar.c:398:	g_signal_connect (ev_sidebar->priv->menu, "deactivate",
shell/ev-sidebar.c:400:			  ev_sidebar->priv->select_button);
shell/ev-sidebar.c:401:	gtk_menu_attach_to_widget (GTK_MENU (ev_sidebar->priv->menu),
shell/ev-sidebar.c:404:	gtk_widget_show (ev_sidebar->priv->menu);
shell/ev-sidebar.c:406:	ev_sidebar->priv->notebook = gtk_notebook_new ();
shell/ev-sidebar.c:407:	gtk_notebook_set_show_border (GTK_NOTEBOOK (ev_sidebar->priv->notebook), FALSE);
shell/ev-sidebar.c:408:	gtk_notebook_set_show_tabs (GTK_NOTEBOOK (ev_sidebar->priv->notebook), FALSE);
shell/ev-sidebar.c:409:	gtk_box_pack_start (GTK_BOX (ev_sidebar), ev_sidebar->priv->notebook,
shell/ev-sidebar.c:411:	gtk_widget_show (ev_sidebar->priv->notebook);
shell/ev-sidebar.c:413:	gtk_widget_set_sensitive (GTK_WIDGET (ev_sidebar->priv->notebook), FALSE);
shell/ev-sidebar.c:414:	gtk_widget_set_sensitive (GTK_WIDGET (ev_sidebar->priv->select_button), FALSE);
shell/ev-sidebar.c:446:				   ev_sidebar->priv->model);
shell/ev-sidebar.c:449:	index = gtk_notebook_append_page (GTK_NOTEBOOK (ev_sidebar->priv->notebook),
shell/ev-sidebar.c:457:	gtk_menu_shell_append (GTK_MENU_SHELL (ev_sidebar->priv->menu),
shell/ev-sidebar.c:461:	gtk_list_store_insert_with_values (GTK_LIST_STORE (ev_sidebar->priv->page_model),
shell/ev-sidebar.c:468:	gtk_list_store_move_before(GTK_LIST_STORE(ev_sidebar->priv->page_model),
shell/ev-sidebar.c:473:	gtk_tree_model_get_iter_first (ev_sidebar->priv->page_model, &iter);
shell/ev-sidebar.c:474:	gtk_tree_model_get (ev_sidebar->priv->page_model,
shell/ev-sidebar.c:480:	gtk_menu_set_active (GTK_MENU (ev_sidebar->priv->menu), index);
shell/ev-sidebar.c:481:	gtk_label_set_text (GTK_LABEL (ev_sidebar->priv->label), label_title);
shell/ev-sidebar.c:482:	gtk_notebook_set_current_page (GTK_NOTEBOOK (ev_sidebar->priv->notebook),
shell/ev-sidebar.c:498:	for (valid = gtk_tree_model_get_iter_first (priv->page_model, &iter);
shell/ev-sidebar.c:500:	     valid = gtk_tree_model_iter_next (priv->page_model, &iter)) {
shell/ev-sidebar.c:504:		gtk_tree_model_get (priv->page_model, &iter,
shell/ev-sidebar.c:521:		gtk_widget_set_sensitive (GTK_WIDGET (sidebar->priv->notebook), TRUE);
shell/ev-sidebar.c:522:		gtk_widget_set_sensitive (GTK_WIDGET (sidebar->priv->select_button), TRUE);
shell/ev-sidebar.c:533:	if (model == sidebar->priv->model)
shell/ev-sidebar.c:536:	sidebar->priv->model = model;
shell/ev-sidebar-layers.c:71:	if (sidebar->priv->job) {
shell/ev-sidebar-layers.c:72:		g_signal_handlers_disconnect_by_func (sidebar->priv->job,
shell/ev-sidebar-layers.c:75:		ev_job_cancel (sidebar->priv->job);						      
shell/ev-sidebar-layers.c:76:		g_object_unref (sidebar->priv->job);
shell/ev-sidebar-layers.c:77:		sidebar->priv->job = NULL;
shell/ev-sidebar-layers.c:80:	if (sidebar->priv->document) {
shell/ev-sidebar-layers.c:81:		g_object_unref (sidebar->priv->document);
shell/ev-sidebar-layers.c:82:		sidebar->priv->document = NULL;
shell/ev-sidebar-layers.c:100:			g_value_set_object (value, ev_sidebar_layers->priv->tree_view);
shell/ev-sidebar-layers.c:191:	model = gtk_tree_view_get_model (ev_layers->priv->tree_view);
shell/ev-sidebar-layers.c:204:		ev_document_layers_show_layer (EV_DOCUMENT_LAYERS (ev_layers->priv->document),
shell/ev-sidebar-layers.c:214:		ev_document_layers_hide_layer (EV_DOCUMENT_LAYERS (ev_layers->priv->document),
shell/ev-sidebar-layers.c:295:	ev_layers->priv->tree_view = ev_sidebar_layers_create_tree_view (ev_layers);
shell/ev-sidebar-layers.c:296:	gtk_tree_view_set_model (ev_layers->priv->tree_view, model);
shell/ev-sidebar-layers.c:300:			   GTK_WIDGET (ev_layers->priv->tree_view));
shell/ev-sidebar-layers.c:373:	document_layers = EV_DOCUMENT_LAYERS (sidebar_layers->priv->document);
shell/ev-sidebar-layers.c:374:	model = gtk_tree_view_get_model (GTK_TREE_VIEW (sidebar_layers->priv->tree_view));
shell/ev-sidebar-layers.c:387:	gtk_tree_view_set_model (GTK_TREE_VIEW (priv->tree_view), job->model);
shell/ev-sidebar-layers.c:390:	priv->job = NULL;
shell/ev-sidebar-layers.c:404:	if (priv->document) {
shell/ev-sidebar-layers.c:405:		gtk_tree_view_set_model (GTK_TREE_VIEW (priv->tree_view), NULL);
shell/ev-sidebar-layers.c:406:		g_object_unref (priv->document);
shell/ev-sidebar-layers.c:409:	priv->document = g_object_ref (document);
shell/ev-sidebar-layers.c:411:	if (priv->job) {
shell/ev-sidebar-layers.c:412:		g_signal_handlers_disconnect_by_func (priv->job,
shell/ev-sidebar-layers.c:415:		g_object_unref (priv->job);
shell/ev-sidebar-layers.c:418:	priv->job = ev_job_layers_new (document);
shell/ev-sidebar-layers.c:419:	g_signal_connect (priv->job, "finished",
shell/ev-sidebar-layers.c:423:	ev_job_scheduler_push_job (priv->job, EV_JOB_PRIORITY_NONE);
shell/ev-password-view.c:61:	if (password_view->priv->password) {
shell/ev-password-view.c:62:		g_free (password_view->priv->password);
shell/ev-password-view.c:63:		password_view->priv->password = NULL;
shell/ev-password-view.c:66:	password_view->priv->parent_window = NULL;
shell/ev-password-view.c:68:	if (password_view->priv->uri_file) {
shell/ev-password-view.c:69:		g_object_unref (password_view->priv->uri_file);
shell/ev-password-view.c:70:		password_view->priv->uri_file = NULL;
shell/ev-password-view.c:117:	password_view->priv->password_save = G_PASSWORD_SAVE_NEVER;
shell/ev-password-view.c:128:	password_view->priv->label =
shell/ev-password-view.c:133:	gtk_box_pack_start (GTK_BOX (vbox), password_view->priv->label, FALSE, FALSE, 0);
shell/ev-password-view.c:171:	if (password_view->priv->uri_file &&
shell/ev-password-view.c:172:	    g_file_equal (file, password_view->priv->uri_file)) {
shell/ev-password-view.c:176:	if (password_view->priv->uri_file)
shell/ev-password-view.c:177:		g_object_unref (password_view->priv->uri_file);
shell/ev-password-view.c:178:	password_view->priv->uri_file = file;
shell/ev-password-view.c:180:	file_name = g_file_get_basename (password_view->priv->uri_file);
shell/ev-password-view.c:185:	gtk_label_set_markup (GTK_LABEL (password_view->priv->label), markup);
shell/ev-password-view.c:197:		g_free (password_view->priv->password);
shell/ev-password-view.c:198:		password_view->priv->password =
shell/ev-password-view.c:199:			g_strdup (gtk_entry_get_text (GTK_ENTRY (password_view->priv->password_entry)));
shell/ev-password-view.c:215:		password_view->priv->password_save = GPOINTER_TO_INT (data);
shell/ev-password-view.c:264:	gtk_window_set_transient_for (GTK_WINDOW (dialog), password_view->priv->parent_window);
shell/ev-password-view.c:299:	file_name = g_file_get_basename (password_view->priv->uri_file);
shell/ev-password-view.c:336:	password_view->priv->password_entry = gtk_entry_new ();
shell/ev-password-view.c:337:	gtk_entry_set_visibility (GTK_ENTRY (password_view->priv->password_entry), FALSE);
shell/ev-password-view.c:338:	g_signal_connect (password_view->priv->password_entry, "changed",
shell/ev-password-view.c:341:	g_signal_connect (password_view->priv->password_entry, "activate",
shell/ev-password-view.c:347:	gtk_grid_attach (GTK_GRID (grid), password_view->priv->password_entry, 1, 0, 1, 1);
shell/ev-password-view.c:348:        gtk_widget_set_hexpand (password_view->priv->password_entry, TRUE);
shell/ev-password-view.c:349:	gtk_widget_show (password_view->priv->password_entry);
shell/ev-password-view.c:352:				       password_view->priv->password_entry);
shell/ev-password-view.c:366:					      password_view->priv->password_save == G_PASSWORD_SAVE_NEVER);
shell/ev-password-view.c:378:					      password_view->priv->password_save == G_PASSWORD_SAVE_FOR_SESSION);
shell/ev-password-view.c:390:					      password_view->priv->password_save == G_PASSWORD_SAVE_PERMANENTLY);
shell/ev-password-view.c:410:	return password_view->priv->password;
shell/ev-password-view.c:416:	return password_view->priv->password_save;
shell/ev-password-view.c:426:	retval->priv->parent_window = parent;
shell/ev-sidebar-annotations.c:84:	if (priv->document) {
shell/ev-sidebar-annotations.c:85:		g_object_unref (priv->document);
shell/ev-sidebar-annotations.c:86:		priv->document = NULL;
shell/ev-sidebar-annotations.c:132:	ev_annots->priv->tree_view = gtk_tree_view_new_with_model (loading_model);
shell/ev-sidebar-annotations.c:135:	gtk_tree_view_set_headers_visible (GTK_TREE_VIEW (ev_annots->priv->tree_view),
shell/ev-sidebar-annotations.c:137:	selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (ev_annots->priv->tree_view));
shell/ev-sidebar-annotations.c:153:	gtk_tree_view_append_column (GTK_TREE_VIEW (ev_annots->priv->tree_view),
shell/ev-sidebar-annotations.c:156:	gtk_container_add (GTK_CONTAINER (swindow), ev_annots->priv->tree_view);
shell/ev-sidebar-annotations.c:157:	gtk_widget_show (ev_annots->priv->tree_view);
shell/ev-sidebar-annotations.c:160:	gtk_notebook_append_page (GTK_NOTEBOOK (ev_annots->priv->notebook),
shell/ev-sidebar-annotations.c:178:	if (GTK_TOOL_ITEM (toolbutton) == sidebar_annots->priv->annot_text_item)
shell/ev-sidebar-annotations.c:198:	ev_annots->priv->palette = gtk_tool_palette_new ();
shell/ev-sidebar-annotations.c:200:	gtk_container_add (GTK_CONTAINER (ev_annots->priv->palette), group);
shell/ev-sidebar-annotations.c:207:	ev_annots->priv->annot_text_item = item;
shell/ev-sidebar-annotations.c:214:	gtk_container_add (GTK_CONTAINER (swindow), ev_annots->priv->palette);
shell/ev-sidebar-annotations.c:215:	gtk_widget_show (ev_annots->priv->palette);
shell/ev-sidebar-annotations.c:218:	gtk_notebook_append_page (GTK_NOTEBOOK (ev_annots->priv->notebook),
shell/ev-sidebar-annotations.c:230:	ev_annots->priv->notebook = gtk_notebook_new ();
shell/ev-sidebar-annotations.c:231:	gtk_notebook_set_show_tabs (GTK_NOTEBOOK (ev_annots->priv->notebook), FALSE);
shell/ev-sidebar-annotations.c:232:	gtk_notebook_set_show_border (GTK_NOTEBOOK (ev_annots->priv->notebook), FALSE);
shell/ev-sidebar-annotations.c:235:        gtk_box_pack_start (GTK_BOX (ev_annots), ev_annots->priv->notebook, TRUE, TRUE, 0);
shell/ev-sidebar-annotations.c:236:	gtk_widget_show (ev_annots->priv->notebook);
shell/ev-sidebar-annotations.c:251:			g_value_set_object (value, ev_sidebar_annots->priv->notebook);
shell/ev-sidebar-annotations.c:315:		toolbutton = GTK_TOGGLE_TOOL_BUTTON (sidebar_annots->priv->annot_text_item);
shell/ev-sidebar-annotations.c:363:		gtk_tree_view_set_model (GTK_TREE_VIEW (priv->tree_view), list);
shell/ev-sidebar-annotations.c:367:		priv->job = NULL;
shell/ev-sidebar-annotations.c:372:	selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (priv->tree_view));
shell/ev-sidebar-annotations.c:374:	if (priv->selection_changed_id == 0) {
shell/ev-sidebar-annotations.c:375:		priv->selection_changed_id =
shell/ev-sidebar-annotations.c:426:					text_icon = gtk_widget_render_icon_pixbuf (priv->tree_view,
shell/ev-sidebar-annotations.c:433:					attachment_icon = gtk_widget_render_icon_pixbuf (priv->tree_view,
shell/ev-sidebar-annotations.c:454:	gtk_tree_view_set_model (GTK_TREE_VIEW (priv->tree_view),
shell/ev-sidebar-annotations.c:464:	priv->job = NULL;
shell/ev-sidebar-annotations.c:472:	if (priv->job) {
shell/ev-sidebar-annotations.c:473:		g_signal_handlers_disconnect_by_func (priv->job,
shell/ev-sidebar-annotations.c:476:		g_object_unref (priv->job);
shell/ev-sidebar-annotations.c:479:	priv->job = ev_job_annots_new (priv->document);
shell/ev-sidebar-annotations.c:480:	g_signal_connect (priv->job, "finished",
shell/ev-sidebar-annotations.c:484:	ev_job_scheduler_push_job (priv->job, EV_JOB_PRIORITY_NONE);
shell/ev-sidebar-annotations.c:499:	if (priv->document)
shell/ev-sidebar-annotations.c:500:		g_object_unref (priv->document);
shell/ev-sidebar-annotations.c:501:	priv->document = g_object_ref (document);
shell/ev-sidebar-annotations.c:504:	gtk_notebook_set_show_tabs (GTK_NOTEBOOK (priv->notebook), show_tabs);
shell/ev-file-monitor.c:67:	if (ev_monitor->priv->monitor) {
shell/ev-file-monitor.c:68:		g_signal_handlers_disconnect_by_func (ev_monitor->priv->monitor,
shell/ev-file-monitor.c:71:		g_object_unref (ev_monitor->priv->monitor);
shell/ev-file-monitor.c:72:		ev_monitor->priv->monitor = NULL;
shell/ev-file-monitor.c:103:	ev_monitor->priv->timeout_id = 0;
shell/ev-file-monitor.c:112:	ev_monitor->priv->timeout_id =
shell/ev-file-monitor.c:119:	if (ev_monitor->priv->timeout_id > 0) {
shell/ev-file-monitor.c:120:		g_source_remove (ev_monitor->priv->timeout_id);
shell/ev-file-monitor.c:121:		ev_monitor->priv->timeout_id = 0;
shell/ev-file-monitor.c:156:	ev_monitor->priv->monitor = g_file_monitor_file (file, G_FILE_MONITOR_NONE, NULL, &error);
shell/ev-file-monitor.c:157:	if (ev_monitor->priv->monitor) {
shell/ev-file-monitor.c:158:		g_signal_connect (ev_monitor->priv->monitor, "changed",
shell/ev-find-sidebar.c:66:        if (priv->process_matches_idle_id > 0) {
shell/ev-find-sidebar.c:67:                g_source_remove (priv->process_matches_idle_id);
shell/ev-find-sidebar.c:68:                priv->process_matches_idle_id = 0;
shell/ev-find-sidebar.c:70:        g_clear_object (&priv->job);
shell/ev-find-sidebar.c:79:        g_clear_pointer (&sidebar->priv->highlighted_result, (GDestroyNotify)gtk_tree_path_free);
shell/ev-find-sidebar.c:123:                if (priv->highlighted_result)
shell/ev-find-sidebar.c:124:                        gtk_tree_path_free (priv->highlighted_result);
shell/ev-find-sidebar.c:125:                priv->highlighted_result = gtk_tree_model_get_path (model, &iter);
shell/ev-find-sidebar.c:151:        priv->tree_view = gtk_tree_view_new_with_model (model);
shell/ev-find-sidebar.c:153:        gtk_tree_view_set_search_column (GTK_TREE_VIEW (priv->tree_view), -1);
shell/ev-find-sidebar.c:154:        gtk_tree_view_set_headers_visible (GTK_TREE_VIEW (priv->tree_view), FALSE);
shell/ev-find-sidebar.c:155:        gtk_container_add (GTK_CONTAINER (swindow), priv->tree_view);
shell/ev-find-sidebar.c:156:        gtk_widget_show (priv->tree_view);
shell/ev-find-sidebar.c:163:        gtk_tree_view_append_column (GTK_TREE_VIEW (priv->tree_view), column);
shell/ev-find-sidebar.c:181:        selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (priv->tree_view));
shell/ev-find-sidebar.c:182:        priv->selection_id = g_signal_connect (selection, "changed",
shell/ev-find-sidebar.c:201:        selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (priv->tree_view));
shell/ev-find-sidebar.c:203:        g_signal_handler_block (selection, priv->selection_id);
shell/ev-find-sidebar.c:204:        gtk_tree_view_set_cursor (GTK_TREE_VIEW (priv->tree_view), priv->highlighted_result, NULL, FALSE);
shell/ev-find-sidebar.c:205:        g_signal_handler_unblock (selection, priv->selection_id);
shell/ev-find-sidebar.c:374:        priv->process_matches_idle_id = 0;
shell/ev-find-sidebar.c:376:        if (!ev_job_find_has_results (priv->job)) {
shell/ev-find-sidebar.c:377:                if (ev_job_is_finished (EV_JOB (priv->job)))
shell/ev-find-sidebar.c:378:                        g_clear_object (&priv->job);
shell/ev-find-sidebar.c:382:        document = EV_JOB (priv->job)->document;
shell/ev-find-sidebar.c:383:        model = gtk_tree_view_get_model (GTK_TREE_VIEW (priv->tree_view));
shell/ev-find-sidebar.c:396:                current_page = priv->current_page;
shell/ev-find-sidebar.c:397:                priv->current_page = (priv->current_page + 1) % priv->job->n_pages;
shell/ev-find-sidebar.c:399:                matches = priv->job->pages[current_page];
shell/ev-find-sidebar.c:412:                if (priv->first_match_page == -1)
shell/ev-find-sidebar.c:413:                        priv->first_match_page = current_page;
shell/ev-find-sidebar.c:425:                                           priv->job->text, current_page, result);
shell/ev-find-sidebar.c:429:                        if (current_page >= priv->job->start_page) {
shell/ev-find-sidebar.c:433:                                                       priv->insert_position);
shell/ev-find-sidebar.c:434:                                priv->insert_position++;
shell/ev-find-sidebar.c:438:                                                              priv->job->text,
shell/ev-find-sidebar.c:439:                                                              priv->job->case_sensitive,
shell/ev-find-sidebar.c:454:        } while (current_page != priv->job_current_page);
shell/ev-find-sidebar.c:456:        if (ev_job_is_finished (EV_JOB (priv->job)) && priv->current_page == priv->job->start_page) {
shell/ev-find-sidebar.c:460:                for (i = 0; i < priv->first_match_page; i++)
shell/ev-find-sidebar.c:461:                        index += ev_job_find_get_n_results (priv->job, i);
shell/ev-find-sidebar.c:463:                priv->highlighted_result = gtk_tree_path_new_from_indices (index, -1);
shell/ev-find-sidebar.c:466:                g_clear_object (&priv->job);
shell/ev-find-sidebar.c:477:        sidebar->priv->job_current_page = page;
shell/ev-find-sidebar.c:493:        if (priv->job == job)
shell/ev-find-sidebar.c:496:        if (priv->process_matches_idle_id)
shell/ev-find-sidebar.c:497:                g_source_remove (priv->process_matches_idle_id);
shell/ev-find-sidebar.c:498:        priv->process_matches_idle_id = 0;
shell/ev-find-sidebar.c:499:        gtk_list_store_clear (GTK_LIST_STORE (gtk_tree_view_get_model (GTK_TREE_VIEW (priv->tree_view))));
shell/ev-find-sidebar.c:501:        g_clear_object (&priv->job);
shell/ev-find-sidebar.c:502:        priv->job = g_object_ref (job);
shell/ev-find-sidebar.c:509:        priv->job_current_page = -1;
shell/ev-find-sidebar.c:510:        priv->first_match_page = -1;
shell/ev-find-sidebar.c:511:        priv->current_page = job->start_page;
shell/ev-find-sidebar.c:512:        priv->insert_position = 0;
shell/ev-find-sidebar.c:513:        g_clear_pointer (&priv->highlighted_result, (GDestroyNotify)gtk_tree_path_free);
shell/ev-find-sidebar.c:521:        if (!priv->job)
shell/ev-find-sidebar.c:524:        if (priv->process_matches_idle_id == 0)
shell/ev-find-sidebar.c:525:                priv->process_matches_idle_id = g_idle_add ((GSourceFunc)process_matches_idle, sidebar);
shell/ev-find-sidebar.c:533:        gtk_list_store_clear (GTK_LIST_STORE (gtk_tree_view_get_model (GTK_TREE_VIEW (priv->tree_view))));
shell/ev-find-sidebar.c:534:        g_clear_pointer (&priv->highlighted_result, (GDestroyNotify)gtk_tree_path_free);
shell/ev-find-sidebar.c:542:        if (!priv->highlighted_result)
shell/ev-find-sidebar.c:545:        if (!gtk_tree_path_prev (priv->highlighted_result)) {
shell/ev-find-sidebar.c:549:                model = gtk_tree_view_get_model (GTK_TREE_VIEW (priv->tree_view));
shell/ev-find-sidebar.c:550:                gtk_tree_model_get_iter (model, &iter, priv->highlighted_result);
shell/ev-find-sidebar.c:552:                        gtk_tree_path_next (priv->highlighted_result);
shell/ev-find-sidebar.c:564:        if (!priv->highlighted_result)
shell/ev-find-sidebar.c:567:        model = gtk_tree_view_get_model (GTK_TREE_VIEW (priv->tree_view));
shell/ev-find-sidebar.c:568:        gtk_tree_model_get_iter (model, &iter, priv->highlighted_result);
shell/ev-find-sidebar.c:570:                gtk_tree_path_next (priv->highlighted_result);
shell/ev-find-sidebar.c:572:                gtk_tree_path_free (priv->highlighted_result);
shell/ev-find-sidebar.c:573:                priv->highlighted_result = gtk_tree_path_new_first ();
shell/ev-window.c:242:#define EV_WINDOW_IS_PRESENTATION(w) (w->priv->presentation_view != NULL)
shell/ev-window.c:400:	GtkAction *action = gtk_action_group_get_action (ev_window->priv->action_group,
shell/ev-window.c:409:	EvDocument *document = ev_window->priv->document;
shell/ev-window.c:438:	if (has_document && ev_window->priv->settings) {
shell/ev-window.c:440:			g_settings_get_boolean (ev_window->priv->settings,
shell/ev-window.c:452:	if (has_document && ev_window->priv->lockdown_settings &&
shell/ev-window.c:453:	    g_settings_get_boolean (ev_window->priv->lockdown_settings, GS_LOCKDOWN_SAVE)) {
shell/ev-window.c:457:	if (has_document && ev_window->priv->lockdown_settings &&
shell/ev-window.c:458:	    g_settings_get_boolean (ev_window->priv->lockdown_settings, GS_LOCKDOWN_PRINT)) {
shell/ev-window.c:490:					has_pages && ev_window->priv->bookmarks);
shell/ev-window.c:502:	EvView *view = EV_VIEW (ev_window->priv->view);
shell/ev-window.c:509:	if (ev_window->priv->document) {
shell/ev-window.c:510:		page = ev_document_model_get_page (ev_window->priv->model);
shell/ev-window.c:511:		n_pages = ev_document_get_n_pages (ev_window->priv->document);
shell/ev-window.c:513:		dual_mode = ev_document_model_get_dual_page (ev_window->priv->model);
shell/ev-window.c:516:	can_find_in_page = (ev_window->priv->find_job &&
shell/ev-window.c:517:			    ev_job_find_has_results (EV_JOB_FIND (ev_window->priv->find_job)));
shell/ev-window.c:557:					!ev_history_is_frozen (ev_window->priv->history));
shell/ev-window.c:585:	toolbar = ((priv->chrome & EV_CHROME_TOOLBAR) != 0  || 
shell/ev-window.c:586:		   (priv->chrome & EV_CHROME_RAISE_TOOLBAR) != 0) && !presentation;
shell/ev-window.c:587:	findbar = (priv->chrome & EV_CHROME_FINDBAR) != 0;
shell/ev-window.c:588:	sidebar = (priv->chrome & EV_CHROME_SIDEBAR) != 0 && priv->document && !presentation;
shell/ev-window.c:590:	set_widget_visibility (priv->toolbar, toolbar);
shell/ev-window.c:591:	set_widget_visibility (priv->find_bar, findbar);
shell/ev-window.c:592:	set_widget_visibility (priv->sidebar, sidebar);
shell/ev-window.c:601:		priv->chrome |= flag;
shell/ev-window.c:603:		priv->chrome &= ~flag;
shell/ev-window.c:610:	GtkActionGroup *action_group = window->priv->zoom_selector_popup_action_group;
shell/ev-window.c:616:	switch (ev_document_model_get_sizing_mode (window->priv->model)) {
shell/ev-window.c:667:	return (ev_window->priv->document == NULL) && 
shell/ev-window.c:668:		(ev_window->priv->load_job == NULL);
shell/ev-window.c:675:	if (window->priv->message_area == area)
shell/ev-window.c:678:	if (window->priv->message_area)
shell/ev-window.c:679:		gtk_widget_destroy (window->priv->message_area);
shell/ev-window.c:680:	window->priv->message_area = area;
shell/ev-window.c:685:	gtk_box_pack_start (GTK_BOX (window->priv->view_box),
shell/ev-window.c:686:			    window->priv->message_area,
shell/ev-window.c:688:	gtk_box_reorder_child (GTK_BOX (window->priv->view_box),
shell/ev-window.c:689:			       window->priv->message_area, 0);
shell/ev-window.c:690:	g_object_add_weak_pointer (G_OBJECT (window->priv->message_area),
shell/ev-window.c:691:				   (gpointer) &(window->priv->message_area));
shell/ev-window.c:712:	if (window->priv->message_area)
shell/ev-window.c:744:	if (window->priv->message_area)
shell/ev-window.c:768:	window->priv->loading_message_timeout = 0;
shell/ev-window.c:769:	gtk_widget_show (window->priv->loading_message);
shell/ev-window.c:777:	if (window->priv->loading_message_timeout)
shell/ev-window.c:779:	window->priv->loading_message_timeout =
shell/ev-window.c:786:	if (window->priv->loading_message_timeout) {
shell/ev-window.c:787:		g_source_remove (window->priv->loading_message_timeout);
shell/ev-window.c:788:		window->priv->loading_message_timeout = 0;
shell/ev-window.c:791:	gtk_widget_hide (window->priv->loading_message);
shell/ev-window.c:828:	if (EV_IS_DOCUMENT_LINKS (window->priv->document) &&
shell/ev-window.c:829:	    ev_document_links_has_document_links (EV_DOCUMENT_LINKS (window->priv->document))) {
shell/ev-window.c:836:		g_object_get (G_OBJECT (window->priv->sidebar_links),
shell/ev-window.c:872:			page_label = ev_document_links_get_dest_page_label (EV_DOCUMENT_LINKS (window->priv->document), dest);
shell/ev-window.c:883:	ev_history_add_link (window->priv->history, new_link ? new_link : link);
shell/ev-window.c:900:	ev_sidebar_layers_update_layers_state (EV_SIDEBAR_LAYERS (window->priv->sidebar_layers));
shell/ev-window.c:923:	if (!window->priv->metadata)
shell/ev-window.c:930:	ev_metadata_set_string (window->priv->metadata, "caret-position", caret_position);
shell/ev-window.c:944:	if (ev_window->priv->metadata && !ev_window_is_empty (ev_window))
shell/ev-window.c:945:		ev_metadata_set_int (ev_window->priv->metadata, "page", new_page);
shell/ev-window.c:954:	g_object_get (ev_window->priv->sidebar,
shell/ev-window.c:958:	if (current_page == ev_window->priv->sidebar_links) {
shell/ev-window.c:960:	} else if (current_page == ev_window->priv->sidebar_thumbs) {
shell/ev-window.c:962:	} else if (current_page == ev_window->priv->sidebar_attachments) {
shell/ev-window.c:964:	} else if (current_page == ev_window->priv->sidebar_layers) {
shell/ev-window.c:966:	} else if (current_page == ev_window->priv->sidebar_annots) {
shell/ev-window.c:968:	} else if (current_page == ev_window->priv->sidebar_bookmarks) {
shell/ev-window.c:983:	EvDocument *document = window->priv->document;
shell/ev-window.c:984:	EvSidebar  *sidebar = EV_SIDEBAR (window->priv->sidebar);
shell/ev-window.c:985:	GtkWidget  *links = window->priv->sidebar_links;
shell/ev-window.c:986:	GtkWidget  *thumbs = window->priv->sidebar_thumbs;
shell/ev-window.c:987:	GtkWidget  *attachments = window->priv->sidebar_attachments;
shell/ev-window.c:988:	GtkWidget  *annots = window->priv->sidebar_annots;
shell/ev-window.c:989:	GtkWidget  *layers = window->priv->sidebar_layers;
shell/ev-window.c:990:	GtkWidget  *bookmarks = window->priv->sidebar_bookmarks;
shell/ev-window.c:1027:	GSettings  *settings = window->priv->default_settings;
shell/ev-window.c:1028:	EvMetadata *metadata = window->priv->metadata;
shell/ev-window.c:1089:	if (!window->priv->metadata)
shell/ev-window.c:1092:	if (ev_metadata_get_boolean (window->priv->metadata, "show_toolbar", &show_toolbar))
shell/ev-window.c:1094:	if (ev_metadata_get_boolean (window->priv->metadata, "sidebar_visibility", &show_sidebar))
shell/ev-window.c:1105:	if (!window->priv->metadata)
shell/ev-window.c:1108:	if (ev_metadata_get_int (window->priv->metadata, "sidebar_size", &sidebar_size))
shell/ev-window.c:1109:		gtk_paned_set_position (GTK_PANED (window->priv->hpaned), sidebar_size);
shell/ev-window.c:1111:	if (ev_metadata_get_string (window->priv->metadata, "sidebar_page", &page_id))
shell/ev-window.c:1128:	if (!window->priv->metadata)
shell/ev-window.c:1132:	if (!window->priv->dest &&
shell/ev-window.c:1133:	    ev_metadata_get_int (window->priv->metadata, "page", &page)) {
shell/ev-window.c:1134:		ev_document_model_set_page (window->priv->model, page);
shell/ev-window.c:1138:	if (ev_metadata_get_string (window->priv->metadata, "sizing_mode", &sizing_mode)) {
shell/ev-window.c:1143:		ev_document_model_set_sizing_mode (window->priv->model, enum_value->value);
shell/ev-window.c:1147:	if (ev_document_model_get_sizing_mode (window->priv->model) == EV_SIZING_FREE) {
shell/ev-window.c:1148:		if (ev_metadata_get_double (window->priv->metadata, "zoom", &zoom)) {
shell/ev-window.c:1150:			ev_document_model_set_scale (window->priv->model, zoom);
shell/ev-window.c:1155:	if (ev_metadata_get_int (window->priv->metadata, "rotation", &rotation)) {
shell/ev-window.c:1170:		ev_document_model_set_rotation (window->priv->model, rotation);
shell/ev-window.c:1174:	if (ev_metadata_get_boolean (window->priv->metadata, "inverted-colors", &inverted_colors)) {
shell/ev-window.c:1175:		ev_document_model_set_inverted_colors (window->priv->model, inverted_colors);
shell/ev-window.c:1179:	if (ev_metadata_get_boolean (window->priv->metadata, "continuous", &continuous)) {
shell/ev-window.c:1180:		ev_document_model_set_continuous (window->priv->model, continuous);
shell/ev-window.c:1184:	if (ev_metadata_get_boolean (window->priv->metadata, "dual-page", &dual_page)) {
shell/ev-window.c:1185:		ev_document_model_set_dual_page (window->priv->model, dual_page);
shell/ev-window.c:1189:	if (ev_metadata_get_boolean (window->priv->metadata, "dual-page-odd-left", &dual_page_odd_left)) {
shell/ev-window.c:1190:		ev_document_model_set_dual_page_odd_pages_left (window->priv->model, dual_page_odd_left);
shell/ev-window.c:1194:	if (ev_metadata_get_boolean (window->priv->metadata, "fullscreen", &fullscreen)) {
shell/ev-window.c:1209:	if (!window->priv->metadata)
shell/ev-window.c:1218:	page = ev_document_model_get_page (window->priv->model);
shell/ev-window.c:1219:	n_pages = ev_document_get_n_pages (window->priv->document);
shell/ev-window.c:1221:		ev_document_model_set_page (window->priv->model, 0);
shell/ev-window.c:1223:	if (ev_metadata_get_int (window->priv->metadata, "window_width", &width) &&
shell/ev-window.c:1224:	    ev_metadata_get_int (window->priv->metadata, "window_height", &height))
shell/ev-window.c:1227:	g_settings_get (window->priv->default_settings, "window-ratio", "(dd)", &width_ratio, &height_ratio);
shell/ev-window.c:1235:		ev_document_get_max_page_size (window->priv->document,
shell/ev-window.c:1264:	if (!window->priv->metadata)
shell/ev-window.c:1267:	if (ev_metadata_get_boolean (window->priv->metadata, "window_maximized", &maximized)) {
shell/ev-window.c:1276:	if (ev_metadata_get_int (window->priv->metadata, "window_x", &x) &&
shell/ev-window.c:1277:	    ev_metadata_get_int (window->priv->metadata, "window_y", &y)) {
shell/ev-window.c:1281:        if (ev_metadata_get_int (window->priv->metadata, "window_width", &width) &&
shell/ev-window.c:1282:	    ev_metadata_get_int (window->priv->metadata, "window_height", &height)) {
shell/ev-window.c:1292:	if (!window->priv->metadata)
shell/ev-window.c:1296:	if (ev_metadata_get_boolean (window->priv->metadata, "presentation", &presentation)) {
shell/ev-window.c:1302:	if (ev_view_supports_caret_navigation (EV_VIEW (window->priv->view))) {
shell/ev-window.c:1306:		if (ev_metadata_get_string (window->priv->metadata, "caret-position", &caret_position)) {
shell/ev-window.c:1316:				ev_view_set_caret_cursor_position (EV_VIEW (window->priv->view),
shell/ev-window.c:1321:		if (ev_metadata_get_boolean (window->priv->metadata, "caret-navigation", &caret_navigation))
shell/ev-window.c:1322:			ev_view_set_caret_navigation_enabled (EV_VIEW (window->priv->view), caret_navigation);
shell/ev-window.c:1334:	ev_view_set_page_cache_size (EV_VIEW (ev_window->priv->view),
shell/ev-window.c:1341:	EvDocumentModel *model = ev_window->priv->model;
shell/ev-window.c:1342:	GSettings       *settings = ev_window->priv->default_settings;
shell/ev-window.c:1350:	gtk_paned_set_position (GTK_PANED (ev_window->priv->hpaned),
shell/ev-window.c:1366:	if (ev_window->priv->thumbnail_job != NULL) {
shell/ev-window.c:1367:		if (!ev_job_is_finished (ev_window->priv->thumbnail_job))
shell/ev-window.c:1368:			ev_job_cancel (ev_window->priv->thumbnail_job);
shell/ev-window.c:1370:		g_signal_handlers_disconnect_by_func (ev_window->priv->thumbnail_job,
shell/ev-window.c:1373:		g_object_unref (ev_window->priv->thumbnail_job);
shell/ev-window.c:1374:		ev_window->priv->thumbnail_job = NULL;
shell/ev-window.c:1383:		if (ev_document_model_get_inverted_colors (ev_window->priv->model))
shell/ev-window.c:1398:	EvDocument *document = ev_window->priv->document;
shell/ev-window.c:1409:	rotation = ev_document_model_get_rotation (ev_window->priv->model);
shell/ev-window.c:1411:	ev_window->priv->thumbnail_job = ev_job_thumbnail_new (document, 0, rotation, scale);
shell/ev-window.c:1412:	g_signal_connect (ev_window->priv->thumbnail_job, "finished",
shell/ev-window.c:1415:	ev_job_scheduler_push_job (ev_window->priv->thumbnail_job, EV_JOB_PRIORITY_NONE);
shell/ev-window.c:1441:        if (priv->settings != NULL)
shell/ev-window.c:1442:                return priv->settings;
shell/ev-window.c:1444:        priv->settings = g_settings_new (GS_SCHEMA_NAME);
shell/ev-window.c:1445:        g_signal_connect (priv->settings,
shell/ev-window.c:1449:        g_signal_connect (priv->settings,
shell/ev-window.c:1454:        return priv->settings;
shell/ev-window.c:1461:	EvDocument *document = ev_window->priv->document;
shell/ev-window.c:1463:	ev_window->priv->setup_document_idle = 0;
shell/ev-window.c:1468:	ev_window_title_set_document (ev_window->priv->title, document);
shell/ev-window.c:1469:	ev_window_title_set_uri (ev_window->priv->title, ev_window->priv->uri);
shell/ev-window.c:1474:	if (!ev_window->priv->lockdown_settings) {
shell/ev-window.c:1475:		ev_window->priv->lockdown_settings = g_settings_new (GS_LOCKDOWN_SCHEMA_NAME);
shell/ev-window.c:1476:		g_signal_connect (ev_window->priv->lockdown_settings,
shell/ev-window.c:1485:	if (ev_window->priv->properties) {
shell/ev-window.c:1486:		ev_properties_dialog_set_document (EV_PROPERTIES_DIALOG (ev_window->priv->properties),
shell/ev-window.c:1487:						   ev_window->priv->uri,
shell/ev-window.c:1488:					           ev_window->priv->document);
shell/ev-window.c:1498:		egg_find_bar_enable_case_sensitive (EGG_FIND_BAR (ev_window->priv->find_bar),
shell/ev-window.c:1500:		egg_find_bar_enable_whole_words_only (EGG_FIND_BAR (ev_window->priv->find_bar),
shell/ev-window.c:1503:		if (ev_window->priv->search_string &&
shell/ev-window.c:1506:			egg_find_bar_set_search_string (EGG_FIND_BAR (ev_window->priv->find_bar), ev_window->priv->search_string);
shell/ev-window.c:1509:		g_clear_pointer (&ev_window->priv->search_string, g_free);
shell/ev-window.c:1513:		gtk_widget_grab_focus (ev_window->priv->presentation_view);
shell/ev-window.c:1514:	else if (!gtk_widget_get_visible (ev_window->priv->find_bar))
shell/ev-window.c:1515:		gtk_widget_grab_focus (ev_window->priv->view);
shell/ev-window.c:1523:	if (ev_window->priv->document == document)
shell/ev-window.c:1526:	if (ev_window->priv->document)
shell/ev-window.c:1527:		g_object_unref (ev_window->priv->document);
shell/ev-window.c:1528:	ev_window->priv->document = g_object_ref (document);
shell/ev-window.c:1544:			EV_VIEW_PRESENTATION (ev_window->priv->presentation_view));
shell/ev-window.c:1545:		gtk_widget_destroy (ev_window->priv->presentation_view);
shell/ev-window.c:1546:		ev_window->priv->presentation_view = NULL;
shell/ev-window.c:1549:		ev_document_model_set_page (ev_window->priv->model, current_page);
shell/ev-window.c:1553:	if (ev_window->priv->setup_document_idle > 0)
shell/ev-window.c:1554:		g_source_remove (ev_window->priv->setup_document_idle);
shell/ev-window.c:1556:	ev_window->priv->setup_document_idle = g_idle_add ((GSourceFunc)ev_window_setup_document, ev_window);
shell/ev-window.c:1563:	if (ev_window->priv->settings &&
shell/ev-window.c:1564:	    g_settings_get_boolean (ev_window->priv->settings, GS_AUTO_RELOAD))
shell/ev-window.c:1573:	g_assert (ev_window->priv->load_job);
shell/ev-window.c:1575:	password = ev_password_view_get_password (EV_PASSWORD_VIEW (ev_window->priv->password_view));
shell/ev-window.c:1576:	ev_job_load_set_password (EV_JOB_LOAD (ev_window->priv->load_job), password);
shell/ev-window.c:1577:	ev_job_scheduler_push_job (ev_window->priv->load_job, EV_JOB_PRIORITY_NONE);
shell/ev-window.c:1583:	if (ev_window->priv->load_job != NULL) {
shell/ev-window.c:1584:		if (!ev_job_is_finished (ev_window->priv->load_job))
shell/ev-window.c:1585:			ev_job_cancel (ev_window->priv->load_job);
shell/ev-window.c:1587:		g_signal_handlers_disconnect_by_func (ev_window->priv->load_job, ev_window_load_job_cb, ev_window);
shell/ev-window.c:1588:		g_object_unref (ev_window->priv->load_job);
shell/ev-window.c:1589:		ev_window->priv->load_job = NULL;
shell/ev-window.c:1596:	if (ev_window->priv->reload_job != NULL) {
shell/ev-window.c:1597:		if (!ev_job_is_finished (ev_window->priv->reload_job))
shell/ev-window.c:1598:			ev_job_cancel (ev_window->priv->reload_job);
shell/ev-window.c:1600:		g_signal_handlers_disconnect_by_func (ev_window->priv->reload_job, ev_window_reload_job_cb, ev_window);
shell/ev-window.c:1601:		g_object_unref (ev_window->priv->reload_job);
shell/ev-window.c:1602:		ev_window->priv->reload_job = NULL;
shell/ev-window.c:1609:	if (ev_window->priv->local_uri) {
shell/ev-window.c:1610:		ev_tmp_uri_unlink (ev_window->priv->local_uri);
shell/ev-window.c:1611:		g_free (ev_window->priv->local_uri);
shell/ev-window.c:1612:		ev_window->priv->local_uri = NULL;
shell/ev-window.c:1626:		ev_view_handle_link (EV_VIEW (ev_window->priv->view), link);
shell/ev-window.c:1637: * ev_window->priv->password_{uri,document}, and thus people who call this
shell/ev-window.c:1656:		ev_document_model_set_document (ev_window->priv->model, document);
shell/ev-window.c:1665:		ev_window_add_recent (ev_window, ev_window->priv->uri);
shell/ev-window.c:1667:		ev_window_title_set_type (ev_window->priv->title,
shell/ev-window.c:1673:				EV_PASSWORD_VIEW (ev_window->priv->password_view));
shell/ev-window.c:1674:			ev_keyring_save_password (ev_window->priv->uri,
shell/ev-window.c:1679:		ev_window_handle_link (ev_window, ev_window->priv->dest);
shell/ev-window.c:1680:		g_clear_object (&ev_window->priv->dest);
shell/ev-window.c:1682:		switch (ev_window->priv->window_mode) {
shell/ev-window.c:1694:		ev_window->priv->monitor = ev_file_monitor_new (ev_window->priv->uri);
shell/ev-window.c:1695:		g_signal_connect_swapped (ev_window->priv->monitor, "changed",
shell/ev-window.c:1709:		password = ev_keyring_lookup_password (ev_window->priv->uri);
shell/ev-window.c:1726:		ev_window_title_set_uri (ev_window->priv->title,
shell/ev-window.c:1727:					 ev_window->priv->uri);
shell/ev-window.c:1728:		ev_window_title_set_type (ev_window->priv->title,
shell/ev-window.c:1731:		ev_password_view_set_uri (EV_PASSWORD_VIEW (ev_window->priv->password_view),
shell/ev-window.c:1737:		ev_password_view_ask_password (EV_PASSWORD_VIEW (ev_window->priv->password_view));
shell/ev-window.c:1758:		ev_window->priv->in_reload = FALSE;
shell/ev-window.c:1759:		if (ev_window->priv->dest) {
shell/ev-window.c:1760:			g_object_unref (ev_window->priv->dest);
shell/ev-window.c:1761:			ev_window->priv->dest = NULL;
shell/ev-window.c:1767:	ev_document_model_set_document (ev_window->priv->model,
shell/ev-window.c:1769:	if (ev_window->priv->dest) {
shell/ev-window.c:1770:		ev_window_handle_link (ev_window, ev_window->priv->dest);
shell/ev-window.c:1771:		g_clear_object (&ev_window->priv->dest);
shell/ev-window.c:1777:		find_bar_search_changed_cb (EGG_FIND_BAR (ev_window->priv->find_bar),
shell/ev-window.c:1782:	ev_window->priv->in_reload = FALSE;
shell/ev-window.c:1796:	return ev_window->priv->uri;
shell/ev-window.c:1809:	if (ev_window->priv->print_dialog)
shell/ev-window.c:1810:		gtk_widget_destroy (ev_window->priv->print_dialog);
shell/ev-window.c:1811:	ev_window->priv->print_dialog = NULL;
shell/ev-window.c:1813:	if (ev_window->priv->properties)
shell/ev-window.c:1814:		gtk_widget_destroy (ev_window->priv->properties);
shell/ev-window.c:1815:	ev_window->priv->properties = NULL;
shell/ev-window.c:1821:	if (ev_window->priv->progress_idle > 0)
shell/ev-window.c:1822:		g_source_remove (ev_window->priv->progress_idle);
shell/ev-window.c:1823:	ev_window->priv->progress_idle = 0;
shell/ev-window.c:1829:	ev_window->priv->progress_idle = 0;
shell/ev-window.c:1837:	if (ev_window->priv->progress_idle > 0)
shell/ev-window.c:1838:		g_source_remove (ev_window->priv->progress_idle);
shell/ev-window.c:1839:	ev_window->priv->progress_idle =
shell/ev-window.c:1849:	if (ev_window->priv->progress_cancellable)
shell/ev-window.c:1850:		g_cancellable_reset (ev_window->priv->progress_cancellable);
shell/ev-window.c:1852:		ev_window->priv->progress_cancellable = g_cancellable_new ();
shell/ev-window.c:1861:		g_cancellable_cancel (ev_window->priv->progress_cancellable);
shell/ev-window.c:1872:	if (ev_window->priv->message_area)
shell/ev-window.c:1875:	text = g_uri_unescape_string (ev_window->priv->uri, NULL);
shell/ev-window.c:1908:	ev_window->priv->in_reload = FALSE;
shell/ev-window.c:1910:	text = g_uri_unescape_string (ev_window->priv->local_uri, NULL);
shell/ev-window.c:1917:	g_free (ev_window->priv->local_uri);
shell/ev-window.c:1918:	ev_window->priv->local_uri = NULL;
shell/ev-window.c:1919:	ev_window->priv->uri_mtime = 0;
shell/ev-window.c:1933:		ev_window->priv->uri_mtime = 0;
shell/ev-window.c:1939:		ev_window->priv->uri_mtime = mtime.tv_sec;
shell/ev-window.c:1978:		ev_job_scheduler_push_job (ev_window->priv->load_job, EV_JOB_PRIORITY_NONE);
shell/ev-window.c:2001:		g_free (ev_window->priv->uri);
shell/ev-window.c:2002:		ev_window->priv->uri = NULL;
shell/ev-window.c:2022:	if (!ev_window->priv->message_area)
shell/ev-window.c:2032:	ev_progress_message_area_set_status (EV_PROGRESS_MESSAGE_AREA (ev_window->priv->message_area),
shell/ev-window.c:2034:	ev_progress_message_area_set_fraction (EV_PROGRESS_MESSAGE_AREA (ev_window->priv->message_area),
shell/ev-window.c:2046:	if (!ev_window->priv->local_uri) {
shell/ev-window.c:2067:		ev_window->priv->local_uri = g_file_get_uri (tmp_file);
shell/ev-window.c:2070:		ev_job_load_set_uri (EV_JOB_LOAD (ev_window->priv->load_job),
shell/ev-window.c:2071:				     ev_window->priv->local_uri);
shell/ev-window.c:2076:	target_file = g_file_new_for_uri (ev_window->priv->local_uri);
shell/ev-window.c:2080:			   ev_window->priv->progress_cancellable,
shell/ev-window.c:2100:	ev_window->priv->in_reload = FALSE;
shell/ev-window.c:2102:	g_clear_pointer (&ev_window->priv->search_string, g_free);
shell/ev-window.c:2103:	ev_window->priv->search_string = search_string ?
shell/ev-window.c:2106:	if (ev_window->priv->uri &&
shell/ev-window.c:2107:	    g_ascii_strcasecmp (ev_window->priv->uri, uri) == 0) {
shell/ev-window.c:2112:	if (ev_window->priv->monitor) {
shell/ev-window.c:2113:		g_object_unref (ev_window->priv->monitor);
shell/ev-window.c:2114:		ev_window->priv->monitor = NULL;
shell/ev-window.c:2121:	ev_window->priv->window_mode = mode;
shell/ev-window.c:2123:	if (ev_window->priv->uri)
shell/ev-window.c:2124:		g_free (ev_window->priv->uri);
shell/ev-window.c:2125:	ev_window->priv->uri = g_strdup (uri);
shell/ev-window.c:2127:	if (ev_window->priv->metadata)
shell/ev-window.c:2128:		g_object_unref (ev_window->priv->metadata);
shell/ev-window.c:2129:	if (ev_window->priv->bookmarks)
shell/ev-window.c:2130:		g_object_unref (ev_window->priv->bookmarks);
shell/ev-window.c:2134:		ev_window->priv->metadata = ev_metadata_new (source_file);
shell/ev-window.c:2137:		ev_window->priv->metadata = NULL;
shell/ev-window.c:2140:	if (ev_window->priv->metadata) {
shell/ev-window.c:2141:		ev_window->priv->bookmarks = ev_bookmarks_new (ev_window->priv->metadata);
shell/ev-window.c:2142:		ev_sidebar_bookmarks_set_bookmarks (EV_SIDEBAR_BOOKMARKS (ev_window->priv->sidebar_bookmarks),
shell/ev-window.c:2143:						    ev_window->priv->bookmarks);
shell/ev-window.c:2144:		g_signal_connect_swapped (ev_window->priv->bookmarks, "changed",
shell/ev-window.c:2148:		ev_window->priv->bookmarks = NULL;
shell/ev-window.c:2151:	if (ev_window->priv->dest)
shell/ev-window.c:2152:		g_object_unref (ev_window->priv->dest);
shell/ev-window.c:2153:	ev_window->priv->dest = dest ? g_object_ref (dest) : NULL;
shell/ev-window.c:2159:	ev_window->priv->load_job = ev_job_load_new (uri);
shell/ev-window.c:2160:	g_signal_connect (ev_window->priv->load_job,
shell/ev-window.c:2165:	if (!g_file_is_native (source_file) && !ev_window->priv->local_uri) {
shell/ev-window.c:2170:		ev_job_scheduler_push_job (ev_window->priv->load_job, EV_JOB_PRIORITY_NONE);
shell/ev-window.c:2181:	if (document == ev_window->priv->document)
shell/ev-window.c:2188:	if (ev_window->priv->monitor) {
shell/ev-window.c:2189:		g_object_unref (ev_window->priv->monitor);
shell/ev-window.c:2190:		ev_window->priv->monitor = NULL;
shell/ev-window.c:2193:	if (ev_window->priv->uri)
shell/ev-window.c:2194:		g_free (ev_window->priv->uri);
shell/ev-window.c:2195:	ev_window->priv->uri = g_strdup (ev_document_get_uri (document));
shell/ev-window.c:2200:	ev_document_model_set_document (ev_window->priv->model, document);
shell/ev-window.c:2211:		ev_view_handle_link (EV_VIEW (ev_window->priv->view), link);
shell/ev-window.c:2230:		egg_find_bar_set_search_string (EGG_FIND_BAR (ev_window->priv->find_bar),
shell/ev-window.c:2235:	ev_window->priv->monitor = ev_file_monitor_new (ev_window->priv->uri);
shell/ev-window.c:2236:	g_signal_connect_swapped (ev_window->priv->monitor, "changed",
shell/ev-window.c:2246:	uri = ev_window->priv->local_uri ? ev_window->priv->local_uri : ev_window->priv->uri;
shell/ev-window.c:2247:	ev_window->priv->reload_job = ev_job_load_new (uri);
shell/ev-window.c:2248:	g_signal_connect (ev_window->priv->reload_job, "finished",
shell/ev-window.c:2251:	ev_job_scheduler_push_job (ev_window->priv->reload_job, EV_JOB_PRIORITY_NONE);
shell/ev-window.c:2260:	if (ev_window->priv->message_area)
shell/ev-window.c:2264:				ev_window->priv->uri);
shell/ev-window.c:2312:	if (!ev_window->priv->message_area)
shell/ev-window.c:2322:	ev_progress_message_area_set_status (EV_PROGRESS_MESSAGE_AREA (ev_window->priv->message_area),
shell/ev-window.c:2324:	ev_progress_message_area_set_fraction (EV_PROGRESS_MESSAGE_AREA (ev_window->priv->message_area),
shell/ev-window.c:2349:	if (ev_window->priv->uri_mtime != mtime.tv_sec) {
shell/ev-window.c:2353:		ev_window->priv->uri_mtime = mtime.tv_sec;
shell/ev-window.c:2357:		target_file = g_file_new_for_uri (ev_window->priv->local_uri);
shell/ev-window.c:2361:				   ev_window->priv->progress_cancellable,
shell/ev-window.c:2382:	remote = g_file_new_for_uri (ev_window->priv->uri);
shell/ev-window.c:2397:	ev_window->priv->in_reload = TRUE;
shell/ev-window.c:2399:	if (ev_window->priv->dest)
shell/ev-window.c:2400:		g_object_unref (ev_window->priv->dest);
shell/ev-window.c:2401:	ev_window->priv->dest = dest ? g_object_ref (dest) : NULL;
shell/ev-window.c:2403:	if (ev_window->priv->local_uri) {
shell/ev-window.c:2536:	if (window->priv->metadata)
shell/ev-window.c:2537:		new_window->priv->metadata = g_object_ref (window->priv->metadata);
shell/ev-window.c:2539:				 window->priv->document,
shell/ev-window.c:2580:	gtk_recent_manager_add_item (window->priv->recent_manager, filename);
shell/ev-window.c:2675:	if (ev_window->priv->recent_ui_id > 0) {
shell/ev-window.c:2676:		gtk_ui_manager_remove_ui (ev_window->priv->ui_manager,
shell/ev-window.c:2677:					  ev_window->priv->recent_ui_id);
shell/ev-window.c:2678:		gtk_ui_manager_ensure_update (ev_window->priv->ui_manager);
shell/ev-window.c:2680:	ev_window->priv->recent_ui_id = gtk_ui_manager_new_merge_id (ev_window->priv->ui_manager);
shell/ev-window.c:2682:	if (ev_window->priv->recent_action_group) {
shell/ev-window.c:2683:		gtk_ui_manager_remove_action_group (ev_window->priv->ui_manager,
shell/ev-window.c:2684:						    ev_window->priv->recent_action_group);
shell/ev-window.c:2685:		g_object_unref (ev_window->priv->recent_action_group);
shell/ev-window.c:2687:	ev_window->priv->recent_action_group = gtk_action_group_new ("RecentFilesActions");
shell/ev-window.c:2688:        g_signal_connect (ev_window->priv->recent_action_group, "connect-proxy",
shell/ev-window.c:2691:	gtk_ui_manager_insert_action_group (ev_window->priv->ui_manager,
shell/ev-window.c:2692:					    ev_window->priv->recent_action_group, -1);
shell/ev-window.c:2694:	items = gtk_recent_manager_get_items (ev_window->priv->recent_manager);
shell/ev-window.c:2738:		gtk_action_group_add_action (ev_window->priv->recent_action_group,
shell/ev-window.c:2742:		gtk_ui_manager_add_ui (ev_window->priv->ui_manager,
shell/ev-window.c:2743:				       ev_window->priv->recent_ui_id,
shell/ev-window.c:2772:	ev_window->priv->progress_idle = 0;
shell/ev-window.c:2774:	if (ev_window->priv->message_area)
shell/ev-window.c:2851:	if (!ev_window->priv->message_area)
shell/ev-window.c:2877:	ev_progress_message_area_set_status (EV_PROGRESS_MESSAGE_AREA (ev_window->priv->message_area),
shell/ev-window.c:2879:	ev_progress_message_area_set_fraction (EV_PROGRESS_MESSAGE_AREA (ev_window->priv->message_area),
shell/ev-window.c:2897:			   ev_window->priv->progress_cancellable,
shell/ev-window.c:2902:	ev_window->priv->progress_idle =
shell/ev-window.c:2913:	if (ev_window->priv->save_job != NULL) {
shell/ev-window.c:2914:		if (!ev_job_is_finished (ev_window->priv->save_job))
shell/ev-window.c:2915:			ev_job_cancel (ev_window->priv->save_job);
shell/ev-window.c:2917:		g_signal_handlers_disconnect_by_func (ev_window->priv->save_job,
shell/ev-window.c:2920:		g_object_unref (ev_window->priv->save_job);
shell/ev-window.c:2921:		ev_window->priv->save_job = NULL;
shell/ev-window.c:2962:	ev_window->priv->save_job = ev_job_save_new (ev_window->priv->document,
shell/ev-window.c:2963:						     uri, ev_window->priv->uri);
shell/ev-window.c:2964:	g_signal_connect (ev_window->priv->save_job, "finished",
shell/ev-window.c:2968:	ev_job_scheduler_push_job (ev_window->priv->save_job, EV_JOB_PRIORITY_NONE);
shell/ev-window.c:2988:	ev_document_factory_add_filters (fc, ev_window->priv->document);
shell/ev-window.c:2997:	file = g_file_new_for_uri (ev_window->priv->uri);
shell/ev-window.c:3004:                                               ev_window->priv->uri,
shell/ev-window.c:3024:	uri = ev_window->priv->local_uri ? ev_window->priv->local_uri : ev_window->priv->uri;
shell/ev-window.c:3060:	file = g_file_new_for_uri (ev_window->priv->uri);
shell/ev-window.c:3103:    sprintf(cmd, "pdftotext %s - | tr -d '.' | wc -w", ev_window->priv->uri);
shell/ev-window.c:3202:		if (window->priv->metadata) {
shell/ev-window.c:3207:			ev_metadata_set_string (window->priv->metadata,
shell/ev-window.c:3240:	if (!window->priv->metadata)
shell/ev-window.c:3244:	ev_metadata_set_int (window->priv->metadata, "page-setup-orientation",
shell/ev-window.c:3246:	ev_metadata_set_double (window->priv->metadata, "page-setup-margin-top",
shell/ev-window.c:3248:	ev_metadata_set_double (window->priv->metadata, "page-setup-margin-bottom",
shell/ev-window.c:3250:	ev_metadata_set_double (window->priv->metadata, "page-setup-margin-left",
shell/ev-window.c:3252:	ev_metadata_set_double (window->priv->metadata, "page-setup-margin-right",
shell/ev-window.c:3262:	if (!window->priv->metadata)
shell/ev-window.c:3269:		ev_metadata_get_string (window->priv->metadata,
shell/ev-window.c:3285:	if (window->priv->metadata &&
shell/ev-window.c:3286:	    ev_metadata_get_int (window->priv->metadata, "page-setup-orientation", &int_value)) {
shell/ev-window.c:3292:	if (window->priv->metadata &&
shell/ev-window.c:3293:	    ev_metadata_get_double (window->priv->metadata, "page-setup-margin-top", &double_value)) {
shell/ev-window.c:3301:	if (window->priv->metadata &&
shell/ev-window.c:3302:	    ev_metadata_get_double (window->priv->metadata, "page-setup-margin-bottom", &double_value)) {
shell/ev-window.c:3310:	if (window->priv->metadata &&
shell/ev-window.c:3311:	    ev_metadata_get_double (window->priv->metadata, "page-setup-margin-left", &double_value)) {
shell/ev-window.c:3319:	if (window->priv->metadata &&
shell/ev-window.c:3320:	    ev_metadata_get_double (window->priv->metadata, "page-setup-margin-right", &double_value)) {
shell/ev-window.c:3358:	if (!ev_window->priv->print_queue)
shell/ev-window.c:3361:	while ((op = g_queue_peek_tail (ev_window->priv->print_queue))) {
shell/ev-window.c:3372:	if (!EV_IS_PROGRESS_MESSAGE_AREA (ev_window->priv->message_area) ||
shell/ev-window.c:3373:	    !ev_window->priv->print_queue)
shell/ev-window.c:3387:	ev_message_area_set_secondary_text (EV_MESSAGE_AREA (ev_window->priv->message_area),
shell/ev-window.c:3454:	g_queue_remove (ev_window->priv->print_queue, op);
shell/ev-window.c:3456:	n_jobs = g_queue_get_length (ev_window->priv->print_queue);
shell/ev-window.c:3459:	if (n_jobs == 0 && ev_window->priv->close_after_print)
shell/ev-window.c:3472:		op = g_queue_peek_tail (ev_window->priv->print_queue);
shell/ev-window.c:3489:	if (!ev_window->priv->message_area) {
shell/ev-window.c:3513:	ev_progress_message_area_set_status (EV_PROGRESS_MESSAGE_AREA (ev_window->priv->message_area),
shell/ev-window.c:3515:	ev_progress_message_area_set_fraction (EV_PROGRESS_MESSAGE_AREA (ev_window->priv->message_area),
shell/ev-window.c:3523:	if (!ev_window->priv->print_queue)
shell/ev-window.c:3524:		ev_window->priv->print_queue = g_queue_new ();
shell/ev-window.c:3526:	g_queue_push_head (ev_window->priv->print_queue, op);
shell/ev-window.c:3528:						     g_queue_get_length (ev_window->priv->print_queue));
shell/ev-window.c:3549:	g_return_if_fail (ev_window->priv->document != NULL);
shell/ev-window.c:3551:	if (!ev_window->priv->print_queue)
shell/ev-window.c:3552:		ev_window->priv->print_queue = g_queue_new ();
shell/ev-window.c:3554:	op = ev_print_operation_new (ev_window->priv->document);
shell/ev-window.c:3570:	current_page = ev_document_model_get_page (ev_window->priv->model);
shell/ev-window.c:3571:	document_last_page = ev_document_get_n_pages (ev_window->priv->document);
shell/ev-window.c:3594:	document_uri = ev_document_get_uri (ev_window->priv->document);
shell/ev-window.c:3612:	embed_page_setup = ev_window->priv->lockdown_settings ?
shell/ev-window.c:3613:		!g_settings_get_boolean (ev_window->priv->lockdown_settings,
shell/ev-window.c:3629:			       ev_document_get_n_pages (window->priv->document));
shell/ev-window.c:3641:	if (ev_window->priv->properties == NULL) {
shell/ev-window.c:3642:		ev_window->priv->properties = ev_properties_dialog_new ();
shell/ev-window.c:3643:		ev_properties_dialog_set_document (EV_PROPERTIES_DIALOG (ev_window->priv->properties),
shell/ev-window.c:3644:						   ev_window->priv->uri,
shell/ev-window.c:3645:					           ev_window->priv->document);
shell/ev-window.c:3646:		g_object_add_weak_pointer (G_OBJECT (ev_window->priv->properties),
shell/ev-window.c:3647:					   (gpointer) &(ev_window->priv->properties));
shell/ev-window.c:3648:		gtk_window_set_transient_for (GTK_WINDOW (ev_window->priv->properties),
shell/ev-window.c:3653:	gtk_widget_show (ev_window->priv->properties);
shell/ev-window.c:3680:	EvDocument  *document = ev_window->priv->document;
shell/ev-window.c:3751:		if (!ev_window->priv->print_queue ||
shell/ev-window.c:3752:		    g_queue_is_empty (ev_window->priv->print_queue))
shell/ev-window.c:3755:			ev_window->priv->close_after_print = TRUE;
shell/ev-window.c:3758:		ev_window->priv->close_after_print = TRUE;
shell/ev-window.c:3759:		if (ev_window->priv->print_queue &&
shell/ev-window.c:3760:		    !g_queue_is_empty (ev_window->priv->print_queue)) {
shell/ev-window.c:3769:		ev_window->priv->close_after_print = FALSE;
shell/ev-window.c:3780:	n_print_jobs = ev_window->priv->print_queue ?
shell/ev-window.c:3781:		g_queue_get_length (ev_window->priv->print_queue) : 0;
shell/ev-window.c:3795:		op = g_queue_peek_tail (ev_window->priv->print_queue);
shell/ev-window.c:3853:			EV_VIEW_PRESENTATION (ev_window->priv->presentation_view));
shell/ev-window.c:3854:		ev_document_model_set_page (ev_window->priv->model, current_page);
shell/ev-window.c:3881:	action = gtk_action_group_get_action (window->priv->action_group,
shell/ev-window.c:3889:	g_signal_emit_by_name (window->priv->view, "scroll", GTK_SCROLL_PAGE_FORWARD, GTK_ORIENTATION_VERTICAL);
shell/ev-window.c:3895:	g_signal_emit_by_name (window->priv->view, "scroll", GTK_SCROLL_PAGE_BACKWARD, GTK_ORIENTATION_VERTICAL);
shell/ev-window.c:3905:	ev_document_model_set_continuous (ev_window->priv->model, continuous);
shell/ev-window.c:3915:	ev_document_model_set_dual_page (ev_window->priv->model, dual_page);
shell/ev-window.c:3924:	ev_document_model_set_dual_page_odd_pages_left (ev_window->priv->model, dual_page_odd_left);
shell/ev-window.c:3933:		ev_document_model_set_sizing_mode (ev_window->priv->model, EV_SIZING_FIT_PAGE);
shell/ev-window.c:3935:		ev_document_model_set_sizing_mode (ev_window->priv->model, EV_SIZING_FREE);
shell/ev-window.c:3943:	ev_document_model_set_sizing_mode (ev_window->priv->model, EV_SIZING_FIT_PAGE);
shell/ev-window.c:3952:		ev_document_model_set_sizing_mode (ev_window->priv->model, EV_SIZING_FIT_WIDTH);
shell/ev-window.c:3954:		ev_document_model_set_sizing_mode (ev_window->priv->model, EV_SIZING_FREE);
shell/ev-window.c:3962:	ev_document_model_set_sizing_mode (ev_window->priv->model, EV_SIZING_FIT_WIDTH);
shell/ev-window.c:3972:		ev_document_model_set_sizing_mode (ev_window->priv->model, EV_SIZING_AUTOMATIC);
shell/ev-window.c:3974:		ev_document_model_set_sizing_mode (ev_window->priv->model, EV_SIZING_FREE);
shell/ev-window.c:3995:	ev_document_model_set_sizing_mode (ev_window->priv->model, EV_SIZING_FREE);
shell/ev-window.c:3996:	ev_document_model_set_scale (ev_window->priv->model,
shell/ev-window.c:4005:	ev_view_select_all (EV_VIEW (ev_window->priv->view));
shell/ev-window.c:4029:	ev_view_find_previous (EV_VIEW (ev_window->priv->view));
shell/ev-window.c:4030:	ev_find_sidebar_previous (EV_FIND_SIDEBAR (ev_window->priv->find_sidebar));
shell/ev-window.c:4036:	ev_view_find_next (EV_VIEW (ev_window->priv->view));
shell/ev-window.c:4037:	ev_find_sidebar_next (EV_FIND_SIDEBAR (ev_window->priv->find_sidebar));
shell/ev-window.c:4055:	find_bar_hidden = !gtk_widget_get_visible (ev_window->priv->find_bar);
shell/ev-window.c:4080:	find_bar_hidden = !gtk_widget_get_visible (ev_window->priv->find_bar);
shell/ev-window.c:4095:	ev_view_copy (EV_VIEW (ev_window->priv->view));
shell/ev-window.c:4103:	if (ev_window->priv->metadata && !ev_window_is_empty (ev_window))
shell/ev-window.c:4104:		ev_metadata_set_int (ev_window->priv->metadata, "sidebar_size",
shell/ev-window.c:4113:	action = gtk_action_group_get_action (window->priv->action_group, "ViewFullscreen");
shell/ev-window.c:4117:				      ev_document_model_get_fullscreen (window->priv->model));
shell/ev-window.c:4125:	if (window->priv->fs_timeout_id)
shell/ev-window.c:4126:		g_source_remove (window->priv->fs_timeout_id);
shell/ev-window.c:4127:	window->priv->fs_timeout_id = 0;
shell/ev-window.c:4133:	if (!ev_toolbar_has_visible_popups (EV_TOOLBAR (window->priv->toolbar)))
shell/ev-window.c:4134:		gtk_widget_hide (window->priv->toolbar);
shell/ev-window.c:4140:	window->priv->fs_timeout_id = 0;
shell/ev-window.c:4143:	return gtk_widget_get_visible (window->priv->toolbar);
shell/ev-window.c:4150:	gtk_widget_show (window->priv->toolbar);
shell/ev-window.c:4152:	window->priv->fs_timeout_id =
shell/ev-window.c:4163:	window->priv->fs_pointer_on_toolbar = TRUE;
shell/ev-window.c:4173:	window->priv->fs_pointer_on_toolbar = FALSE;
shell/ev-window.c:4189:	motion_delay = (current_time - window->priv->fs_motion_start_time) / 1000;
shell/ev-window.c:4190:	if (window->priv->fs_motion_start_time == 0 ||
shell/ev-window.c:4193:		window->priv->fs_motion_start_time = current_time;
shell/ev-window.c:4194:		window->priv->fs_motion_n_events = 0;
shell/ev-window.c:4198:	window->priv->fs_motion_n_events++;
shell/ev-window.c:4199:	if (!window->priv->fs_pointer_on_toolbar &&
shell/ev-window.c:4200:	    window->priv->fs_motion_n_events > FULLSCREEN_MOTION_NUM_EVENTS)
shell/ev-window.c:4237:	if (ev_document_model_get_fullscreen (window->priv->model))
shell/ev-window.c:4245:	window->priv->fs_overlay = gtk_overlay_new ();
shell/ev-window.c:4246:	gtk_widget_add_events (window->priv->fs_overlay,
shell/ev-window.c:4249:	g_signal_connect (window->priv->fs_overlay, "enter-notify-event",
shell/ev-window.c:4252:	g_signal_connect (window->priv->fs_overlay, "leave-notify-event",
shell/ev-window.c:4256:	g_object_ref (window->priv->main_box);
shell/ev-window.c:4257:	gtk_container_remove (GTK_CONTAINER (window), window->priv->main_box);
shell/ev-window.c:4258:	gtk_container_add (GTK_CONTAINER (window->priv->fs_overlay),
shell/ev-window.c:4259:			   window->priv->main_box);
shell/ev-window.c:4260:	g_object_unref (window->priv->main_box);
shell/ev-window.c:4262:	gtk_container_add (GTK_CONTAINER (window), window->priv->fs_overlay);
shell/ev-window.c:4263:	gtk_widget_show (window->priv->fs_overlay);
shell/ev-window.c:4265:	g_object_ref (window->priv->toolbar);
shell/ev-window.c:4266:	gtk_container_remove (GTK_CONTAINER (window->priv->main_box),
shell/ev-window.c:4267:			      window->priv->toolbar);
shell/ev-window.c:4268:	gtk_overlay_add_overlay (GTK_OVERLAY (window->priv->fs_overlay),
shell/ev-window.c:4269:				 window->priv->toolbar);
shell/ev-window.c:4270:	g_object_unref (window->priv->toolbar);
shell/ev-window.c:4272:	g_object_set (G_OBJECT (window->priv->scrolled_window),
shell/ev-window.c:4276:	ev_document_model_set_fullscreen (window->priv->model, TRUE);
shell/ev-window.c:4285:	gtk_widget_grab_focus (window->priv->view);
shell/ev-window.c:4287:	if (window->priv->metadata && !ev_window_is_empty (window))
shell/ev-window.c:4288:		ev_metadata_set_boolean (window->priv->metadata, "fullscreen", TRUE);
shell/ev-window.c:4295:	if (!ev_document_model_get_fullscreen (window->priv->model))
shell/ev-window.c:4298:	g_object_ref (window->priv->toolbar);
shell/ev-window.c:4299:	gtk_container_remove (GTK_CONTAINER (window->priv->fs_overlay),
shell/ev-window.c:4300:			      window->priv->toolbar);
shell/ev-window.c:4301:	gtk_box_pack_start (GTK_BOX (window->priv->main_box),
shell/ev-window.c:4302:			    window->priv->toolbar,
shell/ev-window.c:4304:	gtk_box_reorder_child (GTK_BOX (window->priv->main_box),
shell/ev-window.c:4305:			       window->priv->toolbar, 0);
shell/ev-window.c:4306:	g_object_unref (window->priv->toolbar);
shell/ev-window.c:4308:	g_object_ref (window->priv->main_box);
shell/ev-window.c:4309:	gtk_container_remove (GTK_CONTAINER (window->priv->fs_overlay),
shell/ev-window.c:4310:			      window->priv->main_box);
shell/ev-window.c:4311:	gtk_container_remove (GTK_CONTAINER (window), window->priv->fs_overlay);
shell/ev-window.c:4312:	window->priv->fs_overlay = NULL;
shell/ev-window.c:4313:	gtk_container_add (GTK_CONTAINER (window), window->priv->main_box);
shell/ev-window.c:4314:	g_object_unref (window->priv->main_box);
shell/ev-window.c:4317:	gtk_widget_show (window->priv->toolbar);
shell/ev-window.c:4319:	g_object_set (G_OBJECT (window->priv->scrolled_window),
shell/ev-window.c:4323:	ev_document_model_set_fullscreen (window->priv->model, FALSE);
shell/ev-window.c:4331:	if (window->priv->metadata && !ev_window_is_empty (window))
shell/ev-window.c:4332:		ev_metadata_set_boolean (window->priv->metadata, "fullscreen", FALSE);
shell/ev-window.c:4353:        if (priv->presentation_mode_inhibit_id != 0)
shell/ev-window.c:4356:        priv->presentation_mode_inhibit_id =
shell/ev-window.c:4369:        if (priv->presentation_mode_inhibit_id == 0)
shell/ev-window.c:4373:                                   priv->presentation_mode_inhibit_id);
shell/ev-window.c:4374:        priv->presentation_mode_inhibit_id = 0;
shell/ev-window.c:4382:	action = gtk_action_group_get_action (window->priv->action_group, "ViewPresentation");
shell/ev-window.c:4424:	if (ev_document_model_get_fullscreen (window->priv->model)) {
shell/ev-window.c:4429:	current_page = ev_document_model_get_page (window->priv->model);
shell/ev-window.c:4430:	rotation = ev_document_model_get_rotation (window->priv->model);
shell/ev-window.c:4431:	inverted_colors = ev_document_model_get_inverted_colors (window->priv->model);
shell/ev-window.c:4432:	window->priv->presentation_view = ev_view_presentation_new (window->priv->document,
shell/ev-window.c:4436:	g_signal_connect_swapped (window->priv->presentation_view, "finished",
shell/ev-window.c:4439:	g_signal_connect_swapped (window->priv->presentation_view, "external-link",
shell/ev-window.c:4442:	g_signal_connect_swapped (window->priv->presentation_view, "focus-in-event",
shell/ev-window.c:4445:	g_signal_connect_swapped (window->priv->presentation_view, "focus-out-event",
shell/ev-window.c:4449:	gtk_box_pack_start (GTK_BOX (window->priv->main_box),
shell/ev-window.c:4450:			    window->priv->presentation_view,
shell/ev-window.c:4453:	gtk_widget_hide (window->priv->hpaned);
shell/ev-window.c:4457:	gtk_widget_grab_focus (window->priv->presentation_view);
shell/ev-window.c:4461:	gtk_widget_show (window->priv->presentation_view);
shell/ev-window.c:4465:	if (window->priv->metadata && !ev_window_is_empty (window))
shell/ev-window.c:4466:		ev_metadata_set_boolean (window->priv->metadata, "presentation", TRUE);
shell/ev-window.c:4479:	current_page = ev_view_presentation_get_current_page (EV_VIEW_PRESENTATION (window->priv->presentation_view));
shell/ev-window.c:4480:	ev_document_model_set_page (window->priv->model, current_page);
shell/ev-window.c:4481:	rotation = ev_view_presentation_get_rotation (EV_VIEW_PRESENTATION (window->priv->presentation_view));
shell/ev-window.c:4482:	ev_document_model_set_rotation (window->priv->model, rotation);
shell/ev-window.c:4484:	gtk_container_remove (GTK_CONTAINER (window->priv->main_box),
shell/ev-window.c:4485:			      window->priv->presentation_view);
shell/ev-window.c:4486:	window->priv->presentation_view = NULL;
shell/ev-window.c:4488:	gtk_widget_show (window->priv->hpaned);
shell/ev-window.c:4494:	gtk_widget_grab_focus (window->priv->view);
shell/ev-window.c:4498:	if (window->priv->metadata && !ev_window_is_empty (window))
shell/ev-window.c:4499:		ev_metadata_set_boolean (window->priv->metadata, "presentation", FALSE);
shell/ev-window.c:4527:		if (ev_document_model_get_fullscreen (window->priv->model) || EV_WINDOW_IS_PRESENTATION (window))
shell/ev-window.c:4532:		if (ev_document_model_get_fullscreen (window->priv->model))
shell/ev-window.c:4548:	if (window->priv->page_mode == page_mode)
shell/ev-window.c:4551:	window->priv->page_mode = page_mode;
shell/ev-window.c:4555:			child = window->priv->view;
shell/ev-window.c:4558:			child = window->priv->password_view;
shell/ev-window.c:4564:	real_child = gtk_bin_get_child (GTK_BIN (window->priv->scrolled_window));
shell/ev-window.c:4566:		gtk_container_remove (GTK_CONTAINER (window->priv->scrolled_window),
shell/ev-window.c:4568:		gtk_container_add (GTK_CONTAINER (window->priv->scrolled_window),
shell/ev-window.c:4581:		rotation = ev_view_presentation_get_rotation (EV_VIEW_PRESENTATION (ev_window->priv->presentation_view));
shell/ev-window.c:4582:		ev_view_presentation_set_rotation (EV_VIEW_PRESENTATION (ev_window->priv->presentation_view),
shell/ev-window.c:4585:		rotation = ev_document_model_get_rotation (ev_window->priv->model);
shell/ev-window.c:4587:		ev_document_model_set_rotation (ev_window->priv->model, rotation - 90);
shell/ev-window.c:4597:		rotation = ev_view_presentation_get_rotation (EV_VIEW_PRESENTATION (ev_window->priv->presentation_view));
shell/ev-window.c:4598:		ev_view_presentation_set_rotation (EV_VIEW_PRESENTATION (ev_window->priv->presentation_view),
shell/ev-window.c:4601:		rotation = ev_document_model_get_rotation (ev_window->priv->model);
shell/ev-window.c:4603:		ev_document_model_set_rotation (ev_window->priv->model, rotation + 90);
shell/ev-window.c:4610:	gboolean inverted_colors = ev_document_model_get_inverted_colors (ev_window->priv->model);
shell/ev-window.c:4612:	ev_document_model_set_inverted_colors (ev_window->priv->model, !inverted_colors);
shell/ev-window.c:4619:	EvDocumentModel *model = priv->model;
shell/ev-window.c:4620:	GSettings       *settings = priv->default_settings;
shell/ev-window.c:4642:				gtk_widget_get_visible (priv->sidebar));
shell/ev-window.c:4644:			    gtk_paned_get_position (GTK_PANED (priv->hpaned)));
shell/ev-window.c:4655:	ev_document_model_set_sizing_mode (ev_window->priv->model, EV_SIZING_FREE);
shell/ev-window.c:4656:	ev_view_zoom_in (EV_VIEW (ev_window->priv->view));
shell/ev-window.c:4664:	ev_document_model_set_sizing_mode (ev_window->priv->model, EV_SIZING_FREE);
shell/ev-window.c:4665:	ev_view_zoom_out (EV_VIEW (ev_window->priv->view));
shell/ev-window.c:4673:	ev_view_previous_page (EV_VIEW (ev_window->priv->view));
shell/ev-window.c:4681:	ev_view_next_page (EV_VIEW (ev_window->priv->view));
shell/ev-window.c:4689:	ev_document_model_set_page (ev_window->priv->model, 0);
shell/ev-window.c:4697:	ev_document_model_set_page (ev_window->priv->model,
shell/ev-window.c:4698:				    ev_document_get_n_pages (ev_window->priv->document) - 1);
shell/ev-window.c:4708:	n_pages = ev_document_get_n_pages (ev_window->priv->document);
shell/ev-window.c:4709:	current_page = ev_document_model_get_page (ev_window->priv->model);
shell/ev-window.c:4712:		ev_document_model_set_page (ev_window->priv->model, current_page + 10);
shell/ev-window.c:4723:	current_page = ev_document_model_get_page (ev_window->priv->model);
shell/ev-window.c:4726:		ev_document_model_set_page (ev_window->priv->model, current_page - 10);
shell/ev-window.c:4736:	ev_document_model_set_page (window->priv->model, page);
shell/ev-window.c:4751:	if (!window->priv->bookmarks)
shell/ev-window.c:4754:	if (window->priv->bookmarks_ui_id > 0) {
shell/ev-window.c:4755:		gtk_ui_manager_remove_ui (window->priv->ui_manager,
shell/ev-window.c:4756:					  window->priv->bookmarks_ui_id);
shell/ev-window.c:4757:		gtk_ui_manager_ensure_update (window->priv->ui_manager);
shell/ev-window.c:4759:	window->priv->bookmarks_ui_id = gtk_ui_manager_new_merge_id (window->priv->ui_manager);
shell/ev-window.c:4761:	if (window->priv->bookmarks_action_group) {
shell/ev-window.c:4762:		gtk_ui_manager_remove_action_group (window->priv->ui_manager,
shell/ev-window.c:4763:						    window->priv->bookmarks_action_group);
shell/ev-window.c:4764:		g_object_unref (window->priv->bookmarks_action_group);
shell/ev-window.c:4766:	window->priv->bookmarks_action_group = gtk_action_group_new ("BookmarksActions");
shell/ev-window.c:4767:	gtk_ui_manager_insert_action_group (window->priv->ui_manager,
shell/ev-window.c:4768:					    window->priv->bookmarks_action_group, -1);
shell/ev-window.c:4770:	items = ev_bookmarks_get_bookmarks (window->priv->bookmarks);
shell/ev-window.c:4781:		gtk_action_group_add_action (window->priv->bookmarks_action_group,
shell/ev-window.c:4784:		gtk_ui_manager_add_ui (window->priv->ui_manager,
shell/ev-window.c:4785:				       window->priv->bookmarks_ui_id,
shell/ev-window.c:4805:	bm.page = ev_document_model_get_page (window->priv->model);
shell/ev-window.c:4806:	page_label = ev_document_get_page_label (window->priv->document, bm.page);
shell/ev-window.c:4811:	ev_bookmarks_add (window->priv->bookmarks, &bm);
shell/ev-window.c:4823:	ev_view_autoscroll_start (EV_VIEW (ev_window->priv->view));
shell/ev-window.c:4841:	ev_view_autoscroll_stop (EV_VIEW (window->priv->view));
shell/ev-window.c:4843:	if (gtk_widget_get_visible (window->priv->find_bar))
shell/ev-window.c:4845:	else if (ev_document_model_get_fullscreen (window->priv->model))
shell/ev-window.c:4850:		gtk_widget_grab_focus (window->priv->view);
shell/ev-window.c:4859:	if (!window->priv->metadata || ev_window_is_empty (window))
shell/ev-window.c:4862:	mode = ev_document_model_get_sizing_mode (window->priv->model);
shell/ev-window.c:4864:	ev_metadata_set_string (window->priv->metadata, "sizing_mode",
shell/ev-window.c:4884:	g_object_set (ev_window->priv->scrolled_window,
shell/ev-window.c:4900:	if (!ev_window->priv->metadata)
shell/ev-window.c:4908:		ev_metadata_set_double (ev_window->priv->metadata, "zoom", zoom);
shell/ev-window.c:4916:	GtkActionGroup *action_group = window->priv->zoom_selector_popup_action_group;
shell/ev-window.c:4938:	action = gtk_action_group_get_action (window->priv->action_group, "ViewContinuous");
shell/ev-window.c:4942:				      ev_document_model_get_continuous (window->priv->model));
shell/ev-window.c:4954:	if (ev_window->priv->metadata && !ev_window_is_empty (ev_window))
shell/ev-window.c:4955:		ev_metadata_set_boolean (ev_window->priv->metadata, "continuous",
shell/ev-window.c:4966:	if (window->priv->metadata && !ev_window_is_empty (window))
shell/ev-window.c:4967:		ev_metadata_set_int (window->priv->metadata, "rotation",
shell/ev-window.c:4978:	action = gtk_action_group_get_action (window->priv->action_group, "ViewInvertedColors");
shell/ev-window.c:4982:				      ev_document_model_get_inverted_colors (window->priv->model));
shell/ev-window.c:4996:	if (window->priv->metadata && !ev_window_is_empty (window))
shell/ev-window.c:4997:		ev_metadata_set_boolean (window->priv->metadata, "inverted-colors",
shell/ev-window.c:5008:	action = gtk_action_group_get_action (window->priv->action_group, "ViewDual");
shell/ev-window.c:5012:				      ev_document_model_get_dual_page (window->priv->model));
shell/ev-window.c:5024:	if (ev_window->priv->metadata && !ev_window_is_empty (ev_window))
shell/ev-window.c:5025:		ev_metadata_set_boolean (ev_window->priv->metadata, "dual-page",
shell/ev-window.c:5034:	action = gtk_action_group_get_action (window->priv->action_group, "ViewDualOddLeft");
shell/ev-window.c:5038:				      ev_document_model_get_dual_page_odd_pages_left (window->priv->model));
shell/ev-window.c:5050:	if (ev_window->priv->metadata && !ev_window_is_empty (ev_window))
shell/ev-window.c:5051:		ev_metadata_set_boolean (ev_window->priv->metadata, "dual-page-odd-left",
shell/ev-window.c:5125:	comments = build_comments_string (ev_window->priv->document);
shell/ev-window.c:5150:	ev_toolbar_action_menu_popup (EV_TOOLBAR (ev_window->priv->toolbar));
shell/ev-window.c:5169:	if (ev_window->priv->metadata && !ev_window_is_empty (ev_window)) {
shell/ev-window.c:5170:		ev_metadata_set_string (ev_window->priv->metadata,
shell/ev-window.c:5183:	action = gtk_action_group_get_action (ev_window->priv->action_group, "ViewSidebar");
shell/ev-window.c:5190:		if (ev_window->priv->metadata)
shell/ev-window.c:5191:			ev_metadata_set_boolean (ev_window->priv->metadata, "sidebar_visibility",
shell/ev-window.c:5194:			gtk_widget_grab_focus (ev_window->priv->view);
shell/ev-window.c:5206:	if (ev_window->priv->link)
shell/ev-window.c:5207:		g_object_unref (ev_window->priv->link);
shell/ev-window.c:5210:		ev_window->priv->link = g_object_ref (link);
shell/ev-window.c:5212:		ev_window->priv->link = NULL;
shell/ev-window.c:5214:	if (ev_window->priv->link) {
shell/ev-window.c:5234:	action = gtk_action_group_get_action (ev_window->priv->view_popup_action_group,
shell/ev-window.c:5238:	action = gtk_action_group_get_action (ev_window->priv->view_popup_action_group,
shell/ev-window.c:5242:	action = gtk_action_group_get_action (ev_window->priv->view_popup_action_group,
shell/ev-window.c:5246:	action = gtk_action_group_get_action (ev_window->priv->view_popup_action_group,
shell/ev-window.c:5258:	if (ev_window->priv->image)
shell/ev-window.c:5259:		g_object_unref (ev_window->priv->image);
shell/ev-window.c:5262:		ev_window->priv->image = g_object_ref (image);
shell/ev-window.c:5264:		ev_window->priv->image = NULL;
shell/ev-window.c:5266:	show_image = (ev_window->priv->image != NULL);
shell/ev-window.c:5268:	action = gtk_action_group_get_action (ev_window->priv->view_popup_action_group,
shell/ev-window.c:5272:	action = gtk_action_group_get_action (ev_window->priv->view_popup_action_group,
shell/ev-window.c:5284:	if (ev_window->priv->annot)
shell/ev-window.c:5285:		g_object_unref (ev_window->priv->annot);
shell/ev-window.c:5286:	ev_window->priv->annot = (annot) ? g_object_ref (annot) : NULL;
shell/ev-window.c:5288:	action = gtk_action_group_get_action (ev_window->priv->view_popup_action_group,
shell/ev-window.c:5298:			if (ev_window->priv->attach_list) {
shell/ev-window.c:5299:				g_list_foreach (ev_window->priv->attach_list,
shell/ev-window.c:5301:				g_list_free (ev_window->priv->attach_list);
shell/ev-window.c:5302:				ev_window->priv->attach_list = NULL;
shell/ev-window.c:5304:			ev_window->priv->attach_list =
shell/ev-window.c:5305:				g_list_prepend (ev_window->priv->attach_list,
shell/ev-window.c:5310:	action = gtk_action_group_get_action (ev_window->priv->attachment_popup_action_group,
shell/ev-window.c:5314:	action = gtk_action_group_get_action (ev_window->priv->attachment_popup_action_group,
shell/ev-window.c:5349:	gtk_menu_popup (GTK_MENU (ev_window->priv->view_popup),
shell/ev-window.c:5364:	if (ev_window->priv->attach_list) {
shell/ev-window.c:5365:		g_list_foreach (ev_window->priv->attach_list,
shell/ev-window.c:5367:		g_list_free (ev_window->priv->attach_list);
shell/ev-window.c:5370:	ev_window->priv->attach_list = attach_list;
shell/ev-window.c:5372:	popup = ev_window->priv->attachment_popup;
shell/ev-window.c:5387:	ev_view_find_set_result (EV_VIEW (window->priv->view), page, result);
shell/ev-window.c:5395:	if (!ev_window->priv->find_job)
shell/ev-window.c:5398:	if (ev_job_is_finished (ev_window->priv->find_job)) {
shell/ev-window.c:5399:		EvJobFind *job_find = EV_JOB_FIND (ev_window->priv->find_job);
shell/ev-window.c:5405:							       ev_document_model_get_page (ev_window->priv->model));
shell/ev-window.c:5419:		percent = ev_job_find_get_progress (EV_JOB_FIND (ev_window->priv->find_job));
shell/ev-window.c:5424:	egg_find_bar_set_status_text (EGG_FIND_BAR (ev_window->priv->find_bar), message);
shell/ev-window.c:5467:		ev_find_sidebar_update (EV_FIND_SIDEBAR (ev_window->priv->find_sidebar));
shell/ev-window.c:5474:	if (ev_window->priv->find_job != NULL) {
shell/ev-window.c:5475:		if (!ev_job_is_finished (ev_window->priv->find_job))
shell/ev-window.c:5476:			ev_job_cancel (ev_window->priv->find_job);
shell/ev-window.c:5478:		g_signal_handlers_disconnect_by_func (ev_window->priv->find_job,
shell/ev-window.c:5481:		g_signal_handlers_disconnect_by_func (ev_window->priv->find_job,
shell/ev-window.c:5484:		g_object_unref (ev_window->priv->find_job);
shell/ev-window.c:5485:		ev_window->priv->find_job = NULL;
shell/ev-window.c:5513:	EggFindBar *find_bar = EGG_FIND_BAR (ev_window->priv->find_bar);
shell/ev-window.c:5516:	if (!ev_window->priv->document || !EV_IS_DOCUMENT_FIND (ev_window->priv->document))
shell/ev-window.c:5525:		ev_window->priv->find_job = ev_job_find_new (ev_window->priv->document,
shell/ev-window.c:5526:							     ev_document_model_get_page (ev_window->priv->model),
shell/ev-window.c:5527:							     ev_document_get_n_pages (ev_window->priv->document),
shell/ev-window.c:5535:		ev_job_find_set_options (EV_JOB_FIND (ev_window->priv->find_job), options);
shell/ev-window.c:5537:		ev_view_find_started (EV_VIEW (ev_window->priv->view), EV_JOB_FIND (ev_window->priv->find_job));
shell/ev-window.c:5538:		ev_find_sidebar_start (EV_FIND_SIDEBAR (ev_window->priv->find_sidebar),
shell/ev-window.c:5539:				       EV_JOB_FIND (ev_window->priv->find_job));
shell/ev-window.c:5541:		g_signal_connect (ev_window->priv->find_job, "finished",
shell/ev-window.c:5544:		g_signal_connect (ev_window->priv->find_job, "updated",
shell/ev-window.c:5547:		ev_job_scheduler_push_job (ev_window->priv->find_job, EV_JOB_PRIORITY_NONE);
shell/ev-window.c:5551:		ev_find_sidebar_clear (EV_FIND_SIDEBAR (ev_window->priv->find_sidebar));
shell/ev-window.c:5552:		gtk_widget_queue_draw (GTK_WIDGET (ev_window->priv->view));
shell/ev-window.c:5562:	ev_view_find_search_changed (EV_VIEW (ev_window->priv->view));
shell/ev-window.c:5575:	if (ev_window->priv->document &&
shell/ev-window.c:5576:	    EV_IS_DOCUMENT_FIND (ev_window->priv->document)) {
shell/ev-window.c:5577:		ev_view_find_set_highlight_search (EV_VIEW (ev_window->priv->view), visible);
shell/ev-window.c:5581:			egg_find_bar_set_status_text (EGG_FIND_BAR (ev_window->priv->find_bar), NULL);
shell/ev-window.c:5591:	action = gtk_action_group_get_action (ev_window->priv->action_group, "EditFind");
shell/ev-window.c:5603:	if (gtk_widget_get_visible (ev_window->priv->find_bar)) {
shell/ev-window.c:5604:		gtk_widget_grab_focus (ev_window->priv->find_bar);
shell/ev-window.c:5608:	if (ev_window->priv->document == NULL || !EV_IS_DOCUMENT_FIND (ev_window->priv->document)) {
shell/ev-window.c:5616:	ev_history_freeze (ev_window->priv->history);
shell/ev-window.c:5618:	g_object_ref (ev_window->priv->sidebar);
shell/ev-window.c:5619:	gtk_container_remove (GTK_CONTAINER (ev_window->priv->hpaned), ev_window->priv->sidebar);
shell/ev-window.c:5620:	gtk_paned_pack1 (GTK_PANED (ev_window->priv->hpaned),
shell/ev-window.c:5621:			 ev_window->priv->find_sidebar, FALSE, FALSE);
shell/ev-window.c:5622:	gtk_widget_show (ev_window->priv->find_sidebar);
shell/ev-window.c:5626:	gtk_widget_grab_focus (ev_window->priv->find_bar);
shell/ev-window.c:5633:	if (!gtk_widget_get_visible (ev_window->priv->find_bar))
shell/ev-window.c:5636:	g_object_ref (ev_window->priv->find_sidebar);
shell/ev-window.c:5637:	gtk_container_remove (GTK_CONTAINER (ev_window->priv->hpaned),
shell/ev-window.c:5638:			      ev_window->priv->find_sidebar);
shell/ev-window.c:5639:	gtk_paned_pack1 (GTK_PANED (ev_window->priv->hpaned),
shell/ev-window.c:5640:			 ev_window->priv->sidebar, FALSE, FALSE);
shell/ev-window.c:5644:	gtk_widget_grab_focus (ev_window->priv->view);
shell/ev-window.c:5647:	ev_history_thaw (ev_window->priv->history);
shell/ev-window.c:5695:	if (window->priv->metadata)
shell/ev-window.c:5696:		ev_metadata_set_boolean (window->priv->metadata, "caret-navigation", enabled);
shell/ev-window.c:5698:	ev_view_set_caret_navigation_enabled (EV_VIEW (window->priv->view), enabled);
shell/ev-window.c:5711:	if (gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (window->priv->ask_caret_navigation_check))) {
shell/ev-window.c:5713:		g_settings_apply (window->priv->settings);
shell/ev-window.c:5716:	window->priv->ask_caret_navigation_check = NULL;
shell/ev-window.c:5718:	gtk_widget_grab_focus (window->priv->view);
shell/ev-window.c:5732:	enabled = ev_view_is_caret_navigation_enabled (EV_VIEW (window->priv->view));
shell/ev-window.c:5739:	if (window->priv->message_area)
shell/ev-window.c:5753:	window->priv->ask_caret_navigation_check = gtk_check_button_new_with_label (_("Don't show this message again"));
shell/ev-window.c:5755:	gtk_box_pack_start (GTK_BOX (hbox), window->priv->ask_caret_navigation_check,
shell/ev-window.c:5784:	if (priv->skeleton != NULL) {
shell/ev-window.c:5787:                g_dbus_interface_skeleton_unexport (G_DBUS_INTERFACE_SKELETON (priv->skeleton));
shell/ev-window.c:5788:                g_object_unref (priv->skeleton);
shell/ev-window.c:5789:                priv->skeleton = NULL;
shell/ev-window.c:5790:                g_free (priv->dbus_object_path);
shell/ev-window.c:5791:                priv->dbus_object_path = NULL;
shell/ev-window.c:5795:	if (priv->bookmarks) {
shell/ev-window.c:5796:		g_object_unref (priv->bookmarks);
shell/ev-window.c:5797:		priv->bookmarks = NULL;
shell/ev-window.c:5800:	if (priv->metadata) {
shell/ev-window.c:5801:		g_object_unref (priv->metadata);
shell/ev-window.c:5802:		priv->metadata = NULL;
shell/ev-window.c:5805:	if (priv->setup_document_idle > 0) {
shell/ev-window.c:5806:		g_source_remove (priv->setup_document_idle);
shell/ev-window.c:5807:		priv->setup_document_idle = 0;
shell/ev-window.c:5810:	if (priv->loading_message_timeout) {
shell/ev-window.c:5811:		g_source_remove (priv->loading_message_timeout);
shell/ev-window.c:5812:		priv->loading_message_timeout = 0;
shell/ev-window.c:5817:	if (priv->monitor) {
shell/ev-window.c:5818:		g_object_unref (priv->monitor);
shell/ev-window.c:5819:		priv->monitor = NULL;
shell/ev-window.c:5822:	if (priv->title) {
shell/ev-window.c:5823:		ev_window_title_free (priv->title);
shell/ev-window.c:5824:		priv->title = NULL;
shell/ev-window.c:5827:	if (priv->ui_manager) {
shell/ev-window.c:5828:		g_object_unref (priv->ui_manager);
shell/ev-window.c:5829:		priv->ui_manager = NULL;
shell/ev-window.c:5832:	if (priv->action_group) {
shell/ev-window.c:5833:		g_object_unref (priv->action_group);
shell/ev-window.c:5834:		priv->action_group = NULL;
shell/ev-window.c:5837:	if (priv->view_popup_action_group) {
shell/ev-window.c:5838:		g_object_unref (priv->view_popup_action_group);
shell/ev-window.c:5839:		priv->view_popup_action_group = NULL;
shell/ev-window.c:5842:	if (priv->attachment_popup_action_group) {
shell/ev-window.c:5843:		g_object_unref (priv->attachment_popup_action_group);
shell/ev-window.c:5844:		priv->attachment_popup_action_group = NULL;
shell/ev-window.c:5847:	g_clear_object (&priv->zoom_selector_popup_action_group);
shell/ev-window.c:5849:	if (priv->recent_action_group) {
shell/ev-window.c:5850:		g_object_unref (priv->recent_action_group);
shell/ev-window.c:5851:		priv->recent_action_group = NULL;
shell/ev-window.c:5854:	if (priv->bookmarks_action_group) {
shell/ev-window.c:5855:		g_object_unref (priv->bookmarks_action_group);
shell/ev-window.c:5856:		priv->bookmarks_action_group = NULL;
shell/ev-window.c:5859:	if (priv->recent_manager) {
shell/ev-window.c:5860:		g_signal_handlers_disconnect_by_func (priv->recent_manager,
shell/ev-window.c:5863:		priv->recent_manager = NULL;
shell/ev-window.c:5866:	if (priv->settings) {
shell/ev-window.c:5867:		g_object_unref (priv->settings);
shell/ev-window.c:5868:		priv->settings = NULL;
shell/ev-window.c:5871:	if (priv->default_settings) {
shell/ev-window.c:5872:		g_settings_apply (priv->default_settings);
shell/ev-window.c:5873:		g_object_unref (priv->default_settings);
shell/ev-window.c:5874:		priv->default_settings = NULL;
shell/ev-window.c:5877:	if (priv->lockdown_settings) {
shell/ev-window.c:5878:		g_object_unref (priv->lockdown_settings);
shell/ev-window.c:5879:		priv->lockdown_settings = NULL;
shell/ev-window.c:5882:	priv->recent_ui_id = 0;
shell/ev-window.c:5884:	if (priv->model) {
shell/ev-window.c:5885:		g_signal_handlers_disconnect_by_func (priv->model,
shell/ev-window.c:5888:		g_object_unref (priv->model);
shell/ev-window.c:5889:		priv->model = NULL;
shell/ev-window.c:5892:	if (priv->document) {
shell/ev-window.c:5893:		g_object_unref (priv->document);
shell/ev-window.c:5894:		priv->document = NULL;
shell/ev-window.c:5897:	if (priv->view) {
shell/ev-window.c:5898:		g_object_unref (priv->view);
shell/ev-window.c:5899:		priv->view = NULL;
shell/ev-window.c:5902:	if (priv->password_view) {
shell/ev-window.c:5903:		g_object_unref (priv->password_view);
shell/ev-window.c:5904:		priv->password_view = NULL;
shell/ev-window.c:5907:	if (priv->load_job) {
shell/ev-window.c:5911:	if (priv->reload_job) {
shell/ev-window.c:5915:	if (priv->save_job) {
shell/ev-window.c:5919:	if (priv->thumbnail_job) {
shell/ev-window.c:5923:	if (priv->find_job) {
shell/ev-window.c:5927:	if (priv->local_uri) {
shell/ev-window.c:5929:		priv->local_uri = NULL;
shell/ev-window.c:5933:	if (priv->progress_cancellable) {
shell/ev-window.c:5934:		g_object_unref (priv->progress_cancellable);
shell/ev-window.c:5935:		priv->progress_cancellable = NULL;
shell/ev-window.c:5940:	if (priv->link) {
shell/ev-window.c:5941:		g_object_unref (priv->link);
shell/ev-window.c:5942:		priv->link = NULL;
shell/ev-window.c:5945:	if (priv->image) {
shell/ev-window.c:5946:		g_object_unref (priv->image);
shell/ev-window.c:5947:		priv->image = NULL;
shell/ev-window.c:5950:	if (priv->annot) {
shell/ev-window.c:5951:		g_object_unref (priv->annot);
shell/ev-window.c:5952:		priv->annot = NULL;
shell/ev-window.c:5955:	if (priv->attach_list) {
shell/ev-window.c:5956:		g_list_foreach (priv->attach_list,
shell/ev-window.c:5959:		g_list_free (priv->attach_list);
shell/ev-window.c:5960:		priv->attach_list = NULL;
shell/ev-window.c:5963:	if (priv->find_bar) {
shell/ev-window.c:5965:			(window->priv->find_bar,
shell/ev-window.c:5968:		priv->find_bar = NULL;
shell/ev-window.c:5971:	if (priv->uri) {
shell/ev-window.c:5972:		g_free (priv->uri);
shell/ev-window.c:5973:		priv->uri = NULL;
shell/ev-window.c:5976:	if (priv->search_string) {
shell/ev-window.c:5977:		g_free (priv->search_string);
shell/ev-window.c:5978:		priv->search_string = NULL;
shell/ev-window.c:5981:	if (priv->dest) {
shell/ev-window.c:5982:		g_object_unref (priv->dest);
shell/ev-window.c:5983:		priv->dest = NULL;
shell/ev-window.c:5986:	if (priv->history) {
shell/ev-window.c:5987:		g_object_unref (priv->history);
shell/ev-window.c:5988:		priv->history = NULL;
shell/ev-window.c:5991:	if (priv->print_queue) {
shell/ev-window.c:5992:		g_queue_free (priv->print_queue);
shell/ev-window.c:5993:		priv->print_queue = NULL;
shell/ev-window.c:6276:	ev_view_handle_link (EV_VIEW (window->priv->view), link);
shell/ev-window.c:6282:	ev_view_handle_link (EV_VIEW (window->priv->view), link);
shell/ev-window.c:6283:	gtk_widget_grab_focus (window->priv->view);
shell/ev-window.c:6290:	ev_view_reload (EV_VIEW (window->priv->view));
shell/ev-window.c:6298:	ev_view_focus_annotation (EV_VIEW (window->priv->view), annot_mapping);
shell/ev-window.c:6306:	ev_view_begin_add_annotation (EV_VIEW (window->priv->view), annot_type);
shell/ev-window.c:6314:	ev_sidebar_annotations_annot_added (EV_SIDEBAR_ANNOTATIONS (window->priv->sidebar_annots),
shell/ev-window.c:6322:	ev_view_cancel_add_annotation (EV_VIEW (window->priv->view));
shell/ev-window.c:6336:	gtk_widget_grab_focus (window->priv->view);
shell/ev-window.c:6342:	GtkActionGroup *action_group = window->priv->zoom_selector_popup_action_group;
shell/ev-window.c:6345:	new_ui_id = gtk_ui_manager_new_merge_id (window->priv->ui_manager);
shell/ev-window.c:6359:		gtk_ui_manager_add_ui (window->priv->ui_manager,
shell/ev-window.c:6382:				  window->priv->model);
shell/ev-window.c:6395:				  window->priv->model);
shell/ev-window.c:6408:				       window->priv->history);
shell/ev-window.c:6479:	action = gtk_action_group_get_action (ev_window->priv->action_group, PAGE_SELECTOR_ACTION);
shell/ev-window.c:6525:		if (window->priv->metadata && !ev_window_is_empty (window))
shell/ev-window.c:6526:			ev_metadata_set_boolean (window->priv->metadata, "window_maximized", maximized);
shell/ev-window.c:6538:	if (!window->priv->metadata)
shell/ev-window.c:6544:		if (window->priv->document) {
shell/ev-window.c:6545:			ev_document_get_max_page_size (window->priv->document,
shell/ev-window.c:6547:			g_settings_set (window->priv->default_settings, "window-ratio", "(dd)",
shell/ev-window.c:6551:			ev_metadata_set_int (window->priv->metadata, "window_x", event->x);
shell/ev-window.c:6552:			ev_metadata_set_int (window->priv->metadata, "window_y", event->y);
shell/ev-window.c:6553:			ev_metadata_set_int (window->priv->metadata, "window_width", event->width);
shell/ev-window.c:6554:			ev_metadata_set_int (window->priv->metadata, "window_height", event->height);
shell/ev-window.c:6581:		dir = g_path_get_dirname (window->priv->uri);
shell/ev-window.c:6645:			file = g_file_new_for_uri (window->priv->uri);
shell/ev-window.c:6679:	dir = g_path_get_dirname (window->priv->uri);
shell/ev-window.c:6758:	ev_view_handle_link (EV_VIEW (window->priv->view), window->priv->link);
shell/ev-window.c:6767:	ev_action = ev_link_get_action (window->priv->link);
shell/ev-window.c:6783:	ev_action = ev_link_get_action (window->priv->link);
shell/ev-window.c:6787:	ev_view_copy_link_address (EV_VIEW (window->priv->view),
shell/ev-window.c:6879:	pixbuf = ev_document_images_get_image (EV_DOCUMENT_IMAGES (ev_window->priv->document),
shell/ev-window.c:6880:					       ev_window->priv->image);
shell/ev-window.c:6920:	if (!window->priv->image)
shell/ev-window.c:6958:	if (!window->priv->image)
shell/ev-window.c:6964:	pixbuf = ev_document_images_get_image (EV_DOCUMENT_IMAGES (window->priv->document),
shell/ev-window.c:6965:					       window->priv->image);
shell/ev-window.c:6981:	EvAnnotation                 *annot = window->priv->annot;
shell/ev-window.c:6987:	dialog = EV_ANNOTATION_PROPERTIES_DIALOG (ev_annotation_properties_dialog_new_with_annotation (window->priv->annot));
shell/ev-window.c:7021:		ev_document_annotations_save_annotation (EV_DOCUMENT_ANNOTATIONS (window->priv->document),
shell/ev-window.c:7022:							 window->priv->annot,
shell/ev-window.c:7027:		ev_view_reload (EV_VIEW (window->priv->view));
shell/ev-window.c:7039:	if (!window->priv->attach_list)
shell/ev-window.c:7044:	for (l = window->priv->attach_list; l && l->data; l = g_list_next (l)) {
shell/ev-window.c:7086:	for (l = ev_window->priv->attach_list; l && l->data; l = g_list_next (l)) {
shell/ev-window.c:7148:	if (!window->priv->attach_list)
shell/ev-window.c:7151:	if (g_list_length (window->priv->attach_list) == 1)
shell/ev-window.c:7152:		attachment = (EvAttachment *) window->priv->attach_list->data;
shell/ev-window.c:7206:			ev_view_presentation_previous_page (EV_VIEW_PRESENTATION (window->priv->presentation_view));
shell/ev-window.c:7211:			ev_view_presentation_next_page (EV_VIEW_PRESENTATION (window->priv->presentation_view));
shell/ev-window.c:7230:        if (window->priv->skeleton == NULL)
shell/ev-window.c:7239:		gfile = g_file_new_for_uri (window->priv->uri);
shell/ev-window.c:7256:        ev_evince_window_emit_sync_source (window->priv->skeleton,
shell/ev-window.c:7266:	if (window->priv->skeleton == NULL)
shell/ev-window.c:7269:        ev_evince_window_emit_closed (window->priv->skeleton);
shell/ev-window.c:7281:        if (window->priv->skeleton == NULL)
shell/ev-window.c:7284:        ev_evince_window_emit_document_loaded (window->priv->skeleton, window->priv->uri);
shell/ev-window.c:7295:	if (window->priv->document && ev_document_has_synctex (window->priv->document)) {
shell/ev-window.c:7300:		ev_view_highlight_forward_search (EV_VIEW (window->priv->view), &link);
shell/ev-window.c:7359:		ev_window->priv->dbus_object_path = g_strdup_printf (EV_WINDOW_DBUS_OBJECT_PATH, window_id++);
shell/ev-window.c:7364:                                                      ev_window->priv->dbus_object_path,
shell/ev-window.c:7366:                        ev_window->priv->skeleton = skeleton;
shell/ev-window.c:7372:				    ev_window->priv->dbus_object_path, error->message);
shell/ev-window.c:7374:			g_free (ev_window->priv->dbus_object_path);
shell/ev-window.c:7375:			ev_window->priv->dbus_object_path = NULL;
shell/ev-window.c:7379:                        ev_window->priv->skeleton = NULL;
shell/ev-window.c:7384:	ev_window->priv->model = ev_document_model_new ();
shell/ev-window.c:7386:	ev_window->priv->page_mode = PAGE_MODE_DOCUMENT;
shell/ev-window.c:7387:	ev_window->priv->chrome = EV_CHROME_NORMAL;
shell/ev-window.c:7388:        ev_window->priv->presentation_mode_inhibit_id = 0;
shell/ev-window.c:7389:	ev_window->priv->title = ev_window_title_new (ev_window);
shell/ev-window.c:7391:	ev_window->priv->history = ev_history_new (ev_window->priv->model);
shell/ev-window.c:7392:	g_signal_connect (ev_window->priv->history, "activate-link",
shell/ev-window.c:7396:	ev_window->priv->main_box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
shell/ev-window.c:7397:	gtk_container_add (GTK_CONTAINER (ev_window), ev_window->priv->main_box);
shell/ev-window.c:7398:	gtk_widget_show (ev_window->priv->main_box);
shell/ev-window.c:7401:	ev_window->priv->action_group = action_group;
shell/ev-window.c:7411:	ev_window->priv->ui_manager = gtk_ui_manager_new ();
shell/ev-window.c:7412:	gtk_ui_manager_insert_action_group (ev_window->priv->ui_manager,
shell/ev-window.c:7416:		gtk_ui_manager_get_accel_group (ev_window->priv->ui_manager);
shell/ev-window.c:7420:	ev_window->priv->view_popup_action_group = action_group;
shell/ev-window.c:7425:	gtk_ui_manager_insert_action_group (ev_window->priv->ui_manager,
shell/ev-window.c:7429:	ev_window->priv->attachment_popup_action_group = action_group;
shell/ev-window.c:7434:	gtk_ui_manager_insert_action_group (ev_window->priv->ui_manager,
shell/ev-window.c:7438:	ev_window->priv->zoom_selector_popup_action_group = action_group;
shell/ev-window.c:7443:	gtk_ui_manager_insert_action_group (ev_window->priv->ui_manager,
shell/ev-window.c:7446:        gtk_ui_manager_add_ui_from_resource (ev_window->priv->ui_manager,
shell/ev-window.c:7463:	ev_window->priv->recent_manager = gtk_recent_manager_get_default ();
shell/ev-window.c:7464:	ev_window->priv->recent_action_group = NULL;
shell/ev-window.c:7465:	ev_window->priv->recent_ui_id = 0;
shell/ev-window.c:7466:	g_signal_connect_swapped (ev_window->priv->recent_manager,
shell/ev-window.c:7471:	ev_window->priv->toolbar = ev_toolbar_new (ev_window);
shell/ev-window.c:7472:	gtk_widget_set_no_show_all (ev_window->priv->toolbar, TRUE);
shell/ev-window.c:7473:	gtk_widget_set_halign (ev_window->priv->toolbar, GTK_ALIGN_FILL);
shell/ev-window.c:7474:	gtk_widget_set_valign (ev_window->priv->toolbar, GTK_ALIGN_START);
shell/ev-window.c:7475:	gtk_box_pack_start (GTK_BOX (ev_window->priv->main_box),
shell/ev-window.c:7476:			    ev_window->priv->toolbar,
shell/ev-window.c:7478:	gtk_widget_show (ev_window->priv->toolbar);
shell/ev-window.c:7481:	ev_window->priv->find_bar = egg_find_bar_new ();
shell/ev-window.c:7482:	gtk_style_context_add_class (gtk_widget_get_style_context (ev_window->priv->find_bar),
shell/ev-window.c:7484:	gtk_box_pack_start (GTK_BOX (ev_window->priv->main_box),
shell/ev-window.c:7485:			    ev_window->priv->find_bar,
shell/ev-window.c:7489:	ev_window->priv->hpaned = gtk_paned_new (GTK_ORIENTATION_HORIZONTAL);
shell/ev-window.c:7490:	g_signal_connect (ev_window->priv->hpaned,
shell/ev-window.c:7495:	gtk_paned_set_position (GTK_PANED (ev_window->priv->hpaned), SIDEBAR_DEFAULT_SIZE);
shell/ev-window.c:7496:	gtk_box_pack_start (GTK_BOX (ev_window->priv->main_box), ev_window->priv->hpaned,
shell/ev-window.c:7498:	gtk_widget_show (ev_window->priv->hpaned);
shell/ev-window.c:7500:	ev_window->priv->sidebar = ev_sidebar_new ();
shell/ev-window.c:7501:	ev_sidebar_set_model (EV_SIDEBAR (ev_window->priv->sidebar),
shell/ev-window.c:7502:			      ev_window->priv->model);
shell/ev-window.c:7503:	gtk_paned_pack1 (GTK_PANED (ev_window->priv->hpaned),
shell/ev-window.c:7504:			 ev_window->priv->sidebar, FALSE, FALSE);
shell/ev-window.c:7505:	gtk_widget_show (ev_window->priv->sidebar);
shell/ev-window.c:7510:	ev_window->priv->sidebar_thumbs = sidebar_widget;
shell/ev-window.c:7517:	ev_sidebar_add_page (EV_SIDEBAR (ev_window->priv->sidebar),
shell/ev-window.c:7521:	ev_window->priv->sidebar_links = sidebar_widget;
shell/ev-window.c:7532:	ev_sidebar_add_page (EV_SIDEBAR (ev_window->priv->sidebar),
shell/ev-window.c:7536:	ev_window->priv->sidebar_attachments = sidebar_widget;
shell/ev-window.c:7542:	ev_sidebar_add_page (EV_SIDEBAR (ev_window->priv->sidebar),
shell/ev-window.c:7546:	ev_window->priv->sidebar_layers = sidebar_widget;
shell/ev-window.c:7552:	ev_sidebar_add_page (EV_SIDEBAR (ev_window->priv->sidebar),
shell/ev-window.c:7556:	ev_window->priv->sidebar_annots = sidebar_widget;
shell/ev-window.c:7570:	ev_sidebar_add_page (EV_SIDEBAR (ev_window->priv->sidebar),
shell/ev-window.c:7574:	ev_window->priv->sidebar_bookmarks = sidebar_widget;
shell/ev-window.c:7580:	ev_sidebar_add_page (EV_SIDEBAR (ev_window->priv->sidebar),
shell/ev-window.c:7583:	ev_window->priv->view_box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
shell/ev-window.c:7586:	ev_window->priv->scrolled_window =
shell/ev-window.c:7590:	gtk_container_add (GTK_CONTAINER (overlay), ev_window->priv->scrolled_window);
shell/ev-window.c:7591:	gtk_widget_show (ev_window->priv->scrolled_window);
shell/ev-window.c:7593:	ev_window->priv->loading_message = ev_loading_message_new ();
shell/ev-window.c:7594:	gtk_widget_set_name (ev_window->priv->loading_message, "ev-loading-message");
shell/ev-window.c:7595:	gtk_widget_set_halign (ev_window->priv->loading_message, GTK_ALIGN_END);
shell/ev-window.c:7596:	gtk_widget_set_valign (ev_window->priv->loading_message, GTK_ALIGN_START);
shell/ev-window.c:7597:	gtk_widget_set_no_show_all (ev_window->priv->loading_message, TRUE);
shell/ev-window.c:7598:	gtk_overlay_add_overlay (GTK_OVERLAY (overlay), ev_window->priv->loading_message);
shell/ev-window.c:7600:	gtk_box_pack_start (GTK_BOX (ev_window->priv->view_box),
shell/ev-window.c:7605:	gtk_paned_add2 (GTK_PANED (ev_window->priv->hpaned),
shell/ev-window.c:7606:			ev_window->priv->view_box);
shell/ev-window.c:7607:	gtk_widget_show (ev_window->priv->view_box);
shell/ev-window.c:7609:	ev_window->priv->view = ev_view_new ();
shell/ev-window.c:7612:	ev_view_set_page_cache_size (EV_VIEW (ev_window->priv->view),
shell/ev-window.c:7614:	ev_view_set_model (EV_VIEW (ev_window->priv->view), ev_window->priv->model);
shell/ev-window.c:7616:	ev_window->priv->password_view = ev_password_view_new (GTK_WINDOW (ev_window));
shell/ev-window.c:7617:	g_signal_connect_swapped (ev_window->priv->password_view,
shell/ev-window.c:7621:	g_signal_connect_object (ev_window->priv->view, "focus_in_event",
shell/ev-window.c:7624:	g_signal_connect_swapped (ev_window->priv->view, "external-link",
shell/ev-window.c:7627:	g_signal_connect_object (ev_window->priv->view, "handle-link",
shell/ev-window.c:7630:	g_signal_connect_object (ev_window->priv->view, "popup",
shell/ev-window.c:7633:	g_signal_connect_object (ev_window->priv->view, "selection-changed",
shell/ev-window.c:7636:	g_signal_connect_object (ev_window->priv->view, "annot-added",
shell/ev-window.c:7639:	g_signal_connect_object (ev_window->priv->view, "layers-changed",
shell/ev-window.c:7642:	g_signal_connect_object (ev_window->priv->view, "notify::is-loading",
shell/ev-window.c:7645:	g_signal_connect_object (ev_window->priv->view, "cursor-moved",
shell/ev-window.c:7649:	g_signal_connect_swapped (ev_window->priv->view, "sync-source",
shell/ev-window.c:7653:	gtk_widget_show (ev_window->priv->view);
shell/ev-window.c:7654:	gtk_widget_show (ev_window->priv->password_view);
shell/ev-window.c:7657:	ev_window->priv->find_sidebar = ev_find_sidebar_new ();
shell/ev-window.c:7658:	g_signal_connect (ev_window->priv->find_sidebar,
shell/ev-window.c:7664:	g_object_ref (ev_window->priv->view);
shell/ev-window.c:7665:	g_object_ref (ev_window->priv->password_view);
shell/ev-window.c:7667:	gtk_container_add (GTK_CONTAINER (ev_window->priv->scrolled_window),
shell/ev-window.c:7668:			   ev_window->priv->view);
shell/ev-window.c:7671:	g_signal_connect_swapped (ev_window->priv->model,
shell/ev-window.c:7675:	g_signal_connect (ev_window->priv->model,
shell/ev-window.c:7679:	g_signal_connect (ev_window->priv->model,
shell/ev-window.c:7683:	g_signal_connect (ev_window->priv->model,
shell/ev-window.c:7687:	g_signal_connect (ev_window->priv->model,
shell/ev-window.c:7691:	g_signal_connect (ev_window->priv->model,
shell/ev-window.c:7695:	g_signal_connect (ev_window->priv->model,
shell/ev-window.c:7699:	g_signal_connect (ev_window->priv->model,
shell/ev-window.c:7703:	g_signal_connect (ev_window->priv->model,
shell/ev-window.c:7707:	g_signal_connect (ev_window->priv->model,
shell/ev-window.c:7713:	g_signal_connect (ev_window->priv->sidebar,
shell/ev-window.c:7717:	g_signal_connect (ev_window->priv->sidebar,
shell/ev-window.c:7723:	g_signal_connect (ev_window->priv->find_bar,
shell/ev-window.c:7727:	g_signal_connect (ev_window->priv->find_bar,
shell/ev-window.c:7731:	g_signal_connect (ev_window->priv->find_bar,
shell/ev-window.c:7735:	g_signal_connect (ev_window->priv->find_bar,
shell/ev-window.c:7739:	g_signal_connect (ev_window->priv->find_bar,
shell/ev-window.c:7743:	g_signal_connect (ev_window->priv->find_bar,
shell/ev-window.c:7747:	g_signal_connect (ev_window->priv->find_bar,
shell/ev-window.c:7753:	ev_window->priv->view_popup = gtk_ui_manager_get_widget (ev_window->priv->ui_manager,
shell/ev-window.c:7755:	ev_window->priv->link = NULL;
shell/ev-window.c:7757:	ev_window->priv->attachment_popup = gtk_ui_manager_get_widget (ev_window->priv->ui_manager,
shell/ev-window.c:7759:	ev_window->priv->attach_list = NULL;
shell/ev-window.c:7770:	gtk_widget_grab_focus (ev_window->priv->view);
shell/ev-window.c:7772:	ev_window->priv->default_settings = g_settings_new (GS_SCHEMA_NAME".Default");
shell/ev-window.c:7773:	g_settings_delay (ev_window->priv->default_settings);
shell/ev-window.c:7781:        ev_window_sizing_mode_changed_cb (ev_window->priv->model, NULL, ev_window);
shell/ev-window.c:7817:	return ev_window->priv->dbus_object_path;
shell/ev-window.c:7828:	return ev_window->priv->ui_manager;
shell/ev-window.c:7836:	return ev_window->priv->action_group;
shell/ev-window.c:7844:	return ev_window->priv->zoom_selector_popup_action_group;
shell/ev-message-area.c:102:	area->priv->main_box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 12);
shell/ev-message-area.c:107:	area->priv->label = gtk_label_new (NULL);
shell/ev-message-area.c:108:	gtk_label_set_use_markup (GTK_LABEL (area->priv->label), TRUE);
shell/ev-message-area.c:109:	gtk_label_set_line_wrap (GTK_LABEL (area->priv->label), TRUE);
shell/ev-message-area.c:110:	gtk_label_set_selectable (GTK_LABEL (area->priv->label), TRUE);
shell/ev-message-area.c:111:	gtk_misc_set_alignment (GTK_MISC (area->priv->label), 0.0, 0.5);
shell/ev-message-area.c:112:	gtk_widget_set_can_focus (area->priv->label, TRUE);
shell/ev-message-area.c:113:	gtk_box_pack_start (GTK_BOX (vbox), area->priv->label, TRUE, TRUE, 0);
shell/ev-message-area.c:114:	gtk_widget_show (area->priv->label);
shell/ev-message-area.c:116:	area->priv->secondary_label = gtk_label_new (NULL);
shell/ev-message-area.c:117:	gtk_label_set_use_markup (GTK_LABEL (area->priv->secondary_label), TRUE);
shell/ev-message-area.c:118:	gtk_label_set_line_wrap (GTK_LABEL (area->priv->secondary_label), TRUE);
shell/ev-message-area.c:119:	gtk_label_set_selectable (GTK_LABEL (area->priv->secondary_label), TRUE);
shell/ev-message-area.c:120:	gtk_misc_set_alignment (GTK_MISC (area->priv->secondary_label), 0.0, 0.5);
shell/ev-message-area.c:121:	gtk_widget_set_can_focus (area->priv->secondary_label, TRUE);
shell/ev-message-area.c:122:	gtk_box_pack_start (GTK_BOX (vbox), area->priv->secondary_label, TRUE, TRUE, 0);
shell/ev-message-area.c:124:	area->priv->image = gtk_image_new_from_stock (NULL, GTK_ICON_SIZE_DIALOG);
shell/ev-message-area.c:125:	gtk_misc_set_alignment (GTK_MISC (area->priv->image), 0.5, 0.0);
shell/ev-message-area.c:126:	gtk_box_pack_start (GTK_BOX (hbox), area->priv->image, FALSE, FALSE, 0);
shell/ev-message-area.c:127:	gtk_widget_show (area->priv->image);
shell/ev-message-area.c:132:	gtk_box_pack_start (GTK_BOX (area->priv->main_box), hbox, TRUE, TRUE, 0);
shell/ev-message-area.c:136:	gtk_container_add (GTK_CONTAINER (content_area), area->priv->main_box);
shell/ev-message-area.c:137:	gtk_widget_show (area->priv->main_box);
shell/ev-message-area.c:168:		gtk_image_set_from_stock (GTK_IMAGE (area->priv->image), stock_id,
shell/ev-message-area.c:217:		g_value_set_string (value, gtk_label_get_label (GTK_LABEL (area->priv->label)));
shell/ev-message-area.c:220:		g_value_set_string (value, gtk_label_get_label (GTK_LABEL (area->priv->secondary_label)));
shell/ev-message-area.c:223:		g_value_set_object (value, area->priv->image);
shell/ev-message-area.c:259:	return area->priv->main_box;
shell/ev-message-area.c:295:	area->priv->message_type = GTK_MESSAGE_OTHER;
shell/ev-message-area.c:297:	parent = gtk_widget_get_parent (area->priv->image);
shell/ev-message-area.c:299:	gtk_container_remove (GTK_CONTAINER (parent), area->priv->image);
shell/ev-message-area.c:302:	area->priv->image = image;
shell/ev-message-area.c:314:	gtk_image_set_from_stock (GTK_IMAGE (area->priv->image),
shell/ev-message-area.c:329:		gtk_label_set_markup (GTK_LABEL (area->priv->label), msg);
shell/ev-message-area.c:332:		gtk_label_set_markup (GTK_LABEL (area->priv->label), NULL);
shell/ev-message-area.c:348:		gtk_label_set_markup (GTK_LABEL (area->priv->secondary_label), msg);
shell/ev-message-area.c:350:		gtk_widget_show (area->priv->secondary_label);
shell/ev-message-area.c:352:		gtk_label_set_markup (GTK_LABEL (area->priv->secondary_label), NULL);
shell/ev-message-area.c:353:		gtk_widget_hide (area->priv->secondary_label);
shell/ev-gdbus-generated.c:637:  g_datalist_clear (&proxy->priv->qdata);
shell/ev-gdbus-generated.c:713:      g_datalist_remove_data (&proxy->priv->qdata, key);
shell/ev-gdbus-generated.c:721:      g_datalist_remove_data (&proxy->priv->qdata, invalidated_properties[n]);
shell/ev-gdbus-generated.c:1171:  g_list_free_full (skeleton->priv->changed_properties, (GDestroyNotify) _changed_property_free);
shell/ev-gdbus-generated.c:1172:  if (skeleton->priv->changed_properties_idle_source != NULL)
shell/ev-gdbus-generated.c:1173:    g_source_destroy (skeleton->priv->changed_properties_idle_source);
shell/ev-gdbus-generated.c:1174:  g_main_context_unref (skeleton->priv->context);
shell/ev-gdbus-generated.c:1175:  g_mutex_clear (&skeleton->priv->lock);
shell/ev-gdbus-generated.c:1188:  g_mutex_init (&skeleton->priv->lock);
shell/ev-gdbus-generated.c:1189:  skeleton->priv->context = g_main_context_ref_thread_default ();
shell/ev-gdbus-generated.c:1770:  g_datalist_clear (&proxy->priv->qdata);
shell/ev-gdbus-generated.c:1846:      g_datalist_remove_data (&proxy->priv->qdata, key);
shell/ev-gdbus-generated.c:1854:      g_datalist_remove_data (&proxy->priv->qdata, invalidated_properties[n]);
shell/ev-gdbus-generated.c:2378:  g_list_free_full (skeleton->priv->changed_properties, (GDestroyNotify) _changed_property_free);
shell/ev-gdbus-generated.c:2379:  if (skeleton->priv->changed_properties_idle_source != NULL)
shell/ev-gdbus-generated.c:2380:    g_source_destroy (skeleton->priv->changed_properties_idle_source);
shell/ev-gdbus-generated.c:2381:  g_main_context_unref (skeleton->priv->context);
shell/ev-gdbus-generated.c:2382:  g_mutex_clear (&skeleton->priv->lock);
shell/ev-gdbus-generated.c:2395:  g_mutex_init (&skeleton->priv->lock);
shell/ev-gdbus-generated.c:2396:  skeleton->priv->context = g_main_context_ref_thread_default ();
shell/ev-history.c:62:        clear_list (history->priv->list);
shell/ev-history.c:63:        history->priv->list = NULL;
shell/ev-history.c:65:        history->priv->current = NULL;
shell/ev-history.c:75:        g_assert (priv->current->next == NULL);
shell/ev-history.c:77:        for (i = 0, l = priv->current; i < EV_HISTORY_MAX_LENGTH && l != NULL; i++, l = l->prev)
shell/ev-history.c:88:        clear_list (priv->list);
shell/ev-history.c:89:        priv->list = l;
shell/ev-history.c:91:        g_assert (g_list_length (priv->list) == EV_HISTORY_MAX_LENGTH);
shell/ev-history.c:143:        return history->priv->frozen > 0;
shell/ev-history.c:160:        if (priv->current) {
shell/ev-history.c:162:                clear_list (priv->current->next);
shell/ev-history.c:163:                priv->current->next = NULL;
shell/ev-history.c:167:        priv->current = g_list_append (NULL, g_object_ref (link));
shell/ev-history.c:168:        priv->list = g_list_concat (priv->list, priv->current);
shell/ev-history.c:178:        g_assert (history->priv->current);
shell/ev-history.c:181:        g_signal_handler_block (history->priv->model, history->priv->page_changed_handler_id);
shell/ev-history.c:182:        g_signal_emit (history, signals[ACTIVATE_LINK], 0, history->priv->current->data);
shell/ev-history.c:183:        g_signal_handler_unblock (history->priv->model, history->priv->page_changed_handler_id);
shell/ev-history.c:200:        return priv->current && priv->current->prev;
shell/ev-history.c:216:        priv->current = priv->current->prev;
shell/ev-history.c:232:        return priv->current && priv->current->next;
shell/ev-history.c:248:        priv->current = priv->current->next;
shell/ev-history.c:287:        l = g_list_find_custom (priv->list, link, (GCompareFunc) compare_link);
shell/ev-history.c:292:        priv->current = l;
shell/ev-history.c:315:        if (priv->current == NULL)
shell/ev-history.c:319:        for (l = priv->current->prev; l != NULL; l = l->prev)
shell/ev-history.c:336:        return g_list_copy (history->priv->current->next);
shell/ev-history.c:344:        history->priv->frozen++;
shell/ev-history.c:351:        g_return_if_fail (history->priv->frozen > 0);
shell/ev-history.c:353:        history->priv->frozen--;
shell/ev-history.c:364:        if (!history->priv->current)
shell/ev-history.c:367:        link = history->priv->current->data;
shell/ev-history.c:378:                document = ev_document_model_get_document (history->priv->model);
shell/ev-history.c:387:                document = ev_document_model_get_document (history->priv->model);
shell/ev-history.c:418:        document = ev_document_model_get_document (history->priv->model);
shell/ev-history.c:464:        if (history->priv->model == model)
shell/ev-history.c:467:        if (history->priv->model) {
shell/ev-history.c:468:                g_object_remove_weak_pointer (G_OBJECT (history->priv->model),
shell/ev-history.c:469:                                              (gpointer)&history->priv->model);
shell/ev-history.c:471:                if (history->priv->page_changed_handler_id) {
shell/ev-history.c:472:                        g_signal_handler_disconnect (history->priv->model,
shell/ev-history.c:473:                                                     history->priv->page_changed_handler_id);
shell/ev-history.c:474:                        history->priv->page_changed_handler_id = 0;
shell/ev-history.c:478:        history->priv->model = model;
shell/ev-history.c:483:                                   (gpointer)&history->priv->model);
shell/ev-history.c:485:        g_signal_connect (history->priv->model, "notify::document",
shell/ev-history.c:488:        history->priv->page_changed_handler_id =
shell/ev-history.c:489:                g_signal_connect (history->priv->model, "page-changed",
shell/ev-sidebar-thumbnails.c:225:	if (sidebar_thumbnails->priv->loading_icons) {
shell/ev-sidebar-thumbnails.c:226:		g_hash_table_destroy (sidebar_thumbnails->priv->loading_icons);
shell/ev-sidebar-thumbnails.c:227:		sidebar_thumbnails->priv->loading_icons = NULL;
shell/ev-sidebar-thumbnails.c:230:	if (sidebar_thumbnails->priv->list_store) {
shell/ev-sidebar-thumbnails.c:232:		g_object_unref (sidebar_thumbnails->priv->list_store);
shell/ev-sidebar-thumbnails.c:233:		sidebar_thumbnails->priv->list_store = NULL;
shell/ev-sidebar-thumbnails.c:249:		if (sidebar->priv->tree_view)
shell/ev-sidebar-thumbnails.c:250:			g_value_set_object (value, sidebar->priv->tree_view);
shell/ev-sidebar-thumbnails.c:252:			g_value_set_object (value, sidebar->priv->icon_view);
shell/ev-sidebar-thumbnails.c:315:	icon = g_hash_table_lookup (priv->loading_icons, key);
shell/ev-sidebar-thumbnails.c:319:		inverted_colors = ev_document_model_get_inverted_colors (priv->model);
shell/ev-sidebar-thumbnails.c:322:		g_hash_table_insert (priv->loading_icons, key, icon);
shell/ev-sidebar-thumbnails.c:345:	for (result = gtk_tree_model_get_iter (GTK_TREE_MODEL (priv->list_store), &iter, path);
shell/ev-sidebar-thumbnails.c:347:	     result = gtk_tree_model_iter_next (GTK_TREE_MODEL (priv->list_store), &iter), start_page ++) {
shell/ev-sidebar-thumbnails.c:352:		gtk_tree_model_get (GTK_TREE_MODEL (priv->list_store),
shell/ev-sidebar-thumbnails.c:363:		ev_thumbnails_size_cache_get_size (priv->size_cache, start_page,
shell/ev-sidebar-thumbnails.c:364:						  priv->rotation,
shell/ev-sidebar-thumbnails.c:375:		gtk_list_store_set (priv->list_store, &iter,
shell/ev-sidebar-thumbnails.c:391:	ev_document_get_page_size (priv->document, page, &width, NULL);
shell/ev-sidebar-thumbnails.c:410:	for (result = gtk_tree_model_get_iter (GTK_TREE_MODEL (priv->list_store), &iter, path);
shell/ev-sidebar-thumbnails.c:412:	     result = gtk_tree_model_iter_next (GTK_TREE_MODEL (priv->list_store), &iter), page ++) {
shell/ev-sidebar-thumbnails.c:416:		gtk_tree_model_get (GTK_TREE_MODEL (priv->list_store), &iter,
shell/ev-sidebar-thumbnails.c:422:			job = ev_job_thumbnail_new (priv->document,
shell/ev-sidebar-thumbnails.c:423:						    page, priv->rotation,
shell/ev-sidebar-thumbnails.c:432:			gtk_list_store_set (priv->list_store, &iter,
shell/ev-sidebar-thumbnails.c:455:	old_start_page = priv->start_page;
shell/ev-sidebar-thumbnails.c:456:	old_end_page = priv->end_page;
shell/ev-sidebar-thumbnails.c:471:	priv->start_page = start_page;
shell/ev-sidebar-thumbnails.c:472:	priv->end_page = end_page;
shell/ev-sidebar-thumbnails.c:490:	page_size = gtk_adjustment_get_page_size (priv->vadjustment);
shell/ev-sidebar-thumbnails.c:495:	value = gtk_adjustment_get_value (priv->vadjustment);
shell/ev-sidebar-thumbnails.c:497:	if (priv->tree_view) {
shell/ev-sidebar-thumbnails.c:498:		if (! gtk_widget_get_realized (priv->tree_view))
shell/ev-sidebar-thumbnails.c:501:		gtk_tree_view_convert_tree_to_bin_window_coords (GTK_TREE_VIEW (priv->tree_view),
shell/ev-sidebar-thumbnails.c:504:		gtk_tree_view_convert_tree_to_bin_window_coords (GTK_TREE_VIEW (priv->tree_view),
shell/ev-sidebar-thumbnails.c:507:		gtk_tree_view_get_path_at_pos (GTK_TREE_VIEW (priv->tree_view),
shell/ev-sidebar-thumbnails.c:510:		gtk_tree_view_get_path_at_pos (GTK_TREE_VIEW (priv->tree_view),
shell/ev-sidebar-thumbnails.c:513:	} else if (priv->icon_view) {
shell/ev-sidebar-thumbnails.c:514:		if (! gtk_widget_get_realized (priv->icon_view))
shell/ev-sidebar-thumbnails.c:516:		if (! gtk_icon_view_get_visible_range (GTK_ICON_VIEW (priv->icon_view), &path, &path2))
shell/ev-sidebar-thumbnails.c:541:	for (i = 0; i < sidebar_thumbnails->priv->n_pages; i++) {
shell/ev-sidebar-thumbnails.c:547:		page_label = ev_document_get_page_label (priv->document, i);
shell/ev-sidebar-thumbnails.c:549:		ev_thumbnails_size_cache_get_size (sidebar_thumbnails->priv->size_cache, i,
shell/ev-sidebar-thumbnails.c:550:						  sidebar_thumbnails->priv->rotation,
shell/ev-sidebar-thumbnails.c:561:		gtk_list_store_append (priv->list_store, &iter);
shell/ev-sidebar-thumbnails.c:562:		gtk_list_store_set (priv->list_store, &iter,
shell/ev-sidebar-thumbnails.c:584:	path = gtk_tree_model_get_path (GTK_TREE_MODEL (priv->list_store),
shell/ev-sidebar-thumbnails.c:589:	ev_document_model_set_page (priv->model, page);
shell/ev-sidebar-thumbnails.c:614:	ev_document_model_set_page (priv->model, page);
shell/ev-sidebar-thumbnails.c:625:	priv->tree_view = gtk_tree_view_new_with_model (GTK_TREE_MODEL (priv->list_store));
shell/ev-sidebar-thumbnails.c:627:	selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (priv->tree_view));
shell/ev-sidebar-thumbnails.c:630:	gtk_tree_view_set_headers_visible (GTK_TREE_VIEW (priv->tree_view), FALSE);
shell/ev-sidebar-thumbnails.c:635:	gtk_tree_view_insert_column_with_attributes (GTK_TREE_VIEW (priv->tree_view), -1,
shell/ev-sidebar-thumbnails.c:639:	gtk_tree_view_insert_column_with_attributes (GTK_TREE_VIEW (priv->tree_view), -1,
shell/ev-sidebar-thumbnails.c:642:	gtk_container_add (GTK_CONTAINER (priv->swindow), priv->tree_view);
shell/ev-sidebar-thumbnails.c:643:	gtk_widget_show (priv->tree_view);
shell/ev-sidebar-thumbnails.c:654:	priv->icon_view = gtk_icon_view_new_with_model (GTK_TREE_MODEL (priv->list_store));
shell/ev-sidebar-thumbnails.c:660:        gtk_cell_layout_pack_start (GTK_CELL_LAYOUT (priv->icon_view), renderer, FALSE);
shell/ev-sidebar-thumbnails.c:661:        gtk_cell_layout_set_attributes (GTK_CELL_LAYOUT (priv->icon_view),
shell/ev-sidebar-thumbnails.c:672:        gtk_cell_layout_pack_end (GTK_CELL_LAYOUT (priv->icon_view), renderer, FALSE);
shell/ev-sidebar-thumbnails.c:673:        gtk_cell_layout_set_attributes (GTK_CELL_LAYOUT (priv->icon_view),
shell/ev-sidebar-thumbnails.c:675:	g_signal_connect (priv->icon_view, "selection-changed",
shell/ev-sidebar-thumbnails.c:678:	gtk_container_add (GTK_CONTAINER (priv->swindow), priv->icon_view);
shell/ev-sidebar-thumbnails.c:679:	gtk_widget_show (priv->icon_view);
shell/ev-sidebar-thumbnails.c:687:	return (ev_document_get_n_pages (priv->document) <= MAX_ICON_VIEW_PAGE_COUNT);
shell/ev-sidebar-thumbnails.c:697:	priv->list_store = gtk_list_store_new (NUM_COLUMNS,
shell/ev-sidebar-thumbnails.c:703:	priv->swindow = gtk_scrolled_window_new (NULL, NULL);
shell/ev-sidebar-thumbnails.c:705:	gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (priv->swindow),
shell/ev-sidebar-thumbnails.c:707:	gtk_scrolled_window_set_shadow_type (GTK_SCROLLED_WINDOW (priv->swindow),
shell/ev-sidebar-thumbnails.c:709:	priv->vadjustment = gtk_scrolled_window_get_vadjustment (GTK_SCROLLED_WINDOW (priv->swindow));
shell/ev-sidebar-thumbnails.c:710:	g_signal_connect_data (priv->vadjustment, "value-changed",
shell/ev-sidebar-thumbnails.c:714:	g_signal_connect_swapped (priv->swindow, "size-allocate",
shell/ev-sidebar-thumbnails.c:717:	gtk_box_pack_start (GTK_BOX (ev_sidebar_thumbnails), priv->swindow, TRUE, TRUE, 0);
shell/ev-sidebar-thumbnails.c:720:	gtk_widget_show_all (priv->swindow);
shell/ev-sidebar-thumbnails.c:732:	if (sidebar->priv->tree_view) {
shell/ev-sidebar-thumbnails.c:733:		tree_view = GTK_TREE_VIEW (sidebar->priv->tree_view);
shell/ev-sidebar-thumbnails.c:736:	} else if (sidebar->priv->icon_view) {
shell/ev-sidebar-thumbnails.c:739:			(sidebar->priv->icon_view,
shell/ev-sidebar-thumbnails.c:742:		gtk_icon_view_select_path (GTK_ICON_VIEW (sidebar->priv->icon_view), path);
shell/ev-sidebar-thumbnails.c:745:			(sidebar->priv->icon_view,
shell/ev-sidebar-thumbnails.c:748:		gtk_icon_view_scroll_to_path (GTK_ICON_VIEW (sidebar->priv->icon_view), path, FALSE, 0.0, 0.0);
shell/ev-sidebar-thumbnails.c:774:	if (sidebar_thumbnails->priv->loading_icons)
shell/ev-sidebar-thumbnails.c:775:		g_hash_table_remove_all (sidebar_thumbnails->priv->loading_icons);
shell/ev-sidebar-thumbnails.c:777:	if (sidebar_thumbnails->priv->document == NULL ||
shell/ev-sidebar-thumbnails.c:778:	    sidebar_thumbnails->priv->n_pages <= 0)
shell/ev-sidebar-thumbnails.c:781:	model = sidebar_thumbnails->priv->model;
shell/ev-sidebar-thumbnails.c:787:	sidebar_thumbnails->priv->start_page = -1;
shell/ev-sidebar-thumbnails.c:788:	sidebar_thumbnails->priv->end_page = -1;
shell/ev-sidebar-thumbnails.c:801:	sidebar_thumbnails->priv->rotation = rotation;
shell/ev-sidebar-thumbnails.c:812:	sidebar_thumbnails->priv->inverted_colors = inverted_colors;
shell/ev-sidebar-thumbnails.c:827:	if (priv->inverted_colors)
shell/ev-sidebar-thumbnails.c:829:	gtk_list_store_set (priv->list_store,
shell/ev-sidebar-thumbnails.c:851:	priv->size_cache = ev_thumbnails_size_cache_get (document);
shell/ev-sidebar-thumbnails.c:852:	priv->document = document;
shell/ev-sidebar-thumbnails.c:853:	priv->n_pages = ev_document_get_n_pages (document);
shell/ev-sidebar-thumbnails.c:854:	priv->rotation = ev_document_model_get_rotation (model);
shell/ev-sidebar-thumbnails.c:855:	priv->inverted_colors = ev_document_model_get_inverted_colors (model);
shell/ev-sidebar-thumbnails.c:856:	priv->loading_icons = g_hash_table_new_full (g_str_hash,
shell/ev-sidebar-thumbnails.c:866:		if (priv->tree_view) {
shell/ev-sidebar-thumbnails.c:867:			gtk_container_remove (GTK_CONTAINER (priv->swindow), priv->tree_view);
shell/ev-sidebar-thumbnails.c:868:			priv->tree_view = NULL;
shell/ev-sidebar-thumbnails.c:871:		if (! priv->icon_view) {
shell/ev-sidebar-thumbnails.c:875:			gtk_widget_queue_resize (priv->icon_view);
shell/ev-sidebar-thumbnails.c:878:		if (priv->icon_view) {
shell/ev-sidebar-thumbnails.c:879:			gtk_container_remove (GTK_CONTAINER (priv->swindow), priv->icon_view);
shell/ev-sidebar-thumbnails.c:880:			priv->icon_view = NULL;
shell/ev-sidebar-thumbnails.c:883:		if (! priv->tree_view) {
shell/ev-sidebar-thumbnails.c:890:	g_signal_connect_swapped (priv->model, "page-changed",
shell/ev-sidebar-thumbnails.c:893:	g_signal_connect (priv->model, "notify::rotation",
shell/ev-sidebar-thumbnails.c:896:	g_signal_connect (priv->model, "notify::inverted-colors",
shell/ev-sidebar-thumbnails.c:899:	sidebar_thumbnails->priv->start_page = -1;
shell/ev-sidebar-thumbnails.c:900:	sidebar_thumbnails->priv->end_page = -1;
shell/ev-sidebar-thumbnails.c:913:	if (priv->model == model)
shell/ev-sidebar-thumbnails.c:916:	priv->model = model;
shell/ev-sidebar-thumbnails.c:946:	gtk_tree_model_foreach (GTK_TREE_MODEL (priv->list_store), ev_sidebar_thumbnails_clear_job, sidebar_thumbnails);
shell/ev-sidebar-thumbnails.c:947:	gtk_list_store_clear (priv->list_store);
shell/ev-zoom-action-widget.c:56:                        gtk_entry_set_text (GTK_ENTRY (control->priv->entry),
shell/ev-zoom-action-widget.c:67:        gtk_entry_set_text (GTK_ENTRY (control->priv->entry), zoom_str);
shell/ev-zoom-action-widget.c:74:        float      zoom = ev_document_model_get_scale (control->priv->model);
shell/ev-zoom-action-widget.c:123:        ev_document_model_set_sizing_mode (control->priv->model, EV_SIZING_FREE);
shell/ev-zoom-action-widget.c:124:        ev_document_model_set_scale (control->priv->model,
shell/ev-zoom-action-widget.c:142:        actions = gtk_action_group_list_actions (ev_window_get_zoom_selector_action_group (control->priv->window));
shell/ev-zoom-action-widget.c:163:        control->priv->popup_shown = TRUE;
shell/ev-zoom-action-widget.c:171:        control->priv->popup_shown = FALSE;
shell/ev-zoom-action-widget.c:181:        if (control->priv->popup != popup)
shell/ev-zoom-action-widget.c:184:        toplevel = gtk_widget_get_toplevel (control->priv->popup);
shell/ev-zoom-action-widget.c:192:        control->priv->popup = NULL;
shell/ev-zoom-action-widget.c:201:        if (control->priv->popup)
shell/ev-zoom-action-widget.c:202:                return control->priv->popup;
shell/ev-zoom-action-widget.c:204:        ui_manager = ev_window_get_ui_manager (control->priv->window);
shell/ev-zoom-action-widget.c:205:        control->priv->popup = gtk_ui_manager_get_widget (ui_manager, "/ZoomSelectorPopup");
shell/ev-zoom-action-widget.c:206:        gtk_menu_attach_to_widget (GTK_MENU (control->priv->popup), GTK_WIDGET (control),
shell/ev-zoom-action-widget.c:208:        toplevel = gtk_widget_get_toplevel (control->priv->popup);
shell/ev-zoom-action-widget.c:216:        return control->priv->popup;
shell/ev-zoom-action-widget.c:238:        gtk_widget_get_allocation (control->priv->entry, &child_allocation);
shell/ev-zoom-action-widget.c:240:        if (!gtk_widget_get_has_window (control->priv->entry)) {
shell/ev-zoom-action-widget.c:245:        gdk_window_get_root_coords (gtk_widget_get_window (control->priv->entry),
shell/ev-zoom-action-widget.c:286:        if (!control->priv->window || event->button != GDK_BUTTON_PRIMARY)
shell/ev-zoom-action-widget.c:302:        gtk_entry_set_width_chars (GTK_ENTRY (control->priv->entry),
shell/ev-zoom-action-widget.c:318:        priv->entry = gtk_entry_new ();
shell/ev-zoom-action-widget.c:319:        gtk_entry_set_icon_from_icon_name (GTK_ENTRY (priv->entry),
shell/ev-zoom-action-widget.c:322:        gtk_box_pack_start (GTK_BOX (vbox), priv->entry, TRUE, FALSE, 0);
shell/ev-zoom-action-widget.c:323:        gtk_widget_show (priv->entry);
shell/ev-zoom-action-widget.c:328:        g_signal_connect (priv->entry, "icon-press",
shell/ev-zoom-action-widget.c:331:        g_signal_connect (priv->entry, "activate",
shell/ev-zoom-action-widget.c:334:        g_signal_connect_swapped (priv->entry, "focus-out-event",
shell/ev-zoom-action-widget.c:351:                g_value_set_boolean (value, control->priv->popup_shown);
shell/ev-zoom-action-widget.c:382:        if (control->priv->model == model)
shell/ev-zoom-action-widget.c:385:        if (control->priv->model) {
shell/ev-zoom-action-widget.c:386:                g_object_remove_weak_pointer (G_OBJECT (control->priv->model),
shell/ev-zoom-action-widget.c:387:                                              (gpointer)&control->priv->model);
shell/ev-zoom-action-widget.c:388:                g_signal_handlers_disconnect_by_func (control->priv->model,
shell/ev-zoom-action-widget.c:392:        control->priv->model = model;
shell/ev-zoom-action-widget.c:397:                                   (gpointer)&control->priv->model);
shell/ev-zoom-action-widget.c:405:        g_signal_connect (control->priv->model, "notify::document",
shell/ev-zoom-action-widget.c:408:        g_signal_connect (control->priv->model, "notify::scale",
shell/ev-zoom-action-widget.c:417:        if (control->priv->window == window)
shell/ev-zoom-action-widget.c:420:        control->priv->window = window;
shell/ev-zoom-action-widget.c:428:        return control->priv->entry;
shell/ev-history-action.c:46:        g_object_get (history_widget, "popup-shown", &history_action->priv->popup_shown, NULL);
shell/ev-history-action.c:57:                ev_history_action_widget_set_history (history_widget, history_action->priv->history);
shell/ev-history-action.c:101:        if (action->priv->history == history)
shell/ev-history-action.c:104:        action->priv->history = history;
shell/ev-history-action.c:117:        return action->priv->popup_shown;
shell/ev-progress-message-area.c:92:	area->priv->label = gtk_label_new (NULL);
shell/ev-progress-message-area.c:93:	gtk_label_set_use_markup (GTK_LABEL (area->priv->label), TRUE);
shell/ev-progress-message-area.c:94:	gtk_label_set_ellipsize (GTK_LABEL (area->priv->label),
shell/ev-progress-message-area.c:96:	gtk_misc_set_alignment (GTK_MISC (area->priv->label), 0.0, 0.5);
shell/ev-progress-message-area.c:97:	gtk_box_pack_start (GTK_BOX (vbox), area->priv->label, TRUE, TRUE, 0);
shell/ev-progress-message-area.c:98:	gtk_widget_show (area->priv->label);
shell/ev-progress-message-area.c:100:	area->priv->progress_bar = gtk_progress_bar_new ();
shell/ev-progress-message-area.c:101:	gtk_widget_set_size_request (area->priv->progress_bar, -1, 15);
shell/ev-progress-message-area.c:102:	gtk_box_pack_start (GTK_BOX (vbox), area->priv->progress_bar, TRUE, FALSE, 0);
shell/ev-progress-message-area.c:103:	gtk_widget_show (area->priv->progress_bar);
shell/ev-progress-message-area.c:139:		g_value_set_string (value, gtk_label_get_label (GTK_LABEL (area->priv->label)));
shell/ev-progress-message-area.c:144:		fraction = gtk_progress_bar_get_fraction (GTK_PROGRESS_BAR (area->priv->progress_bar));
shell/ev-progress-message-area.c:186:	gtk_label_set_text (GTK_LABEL (area->priv->label), str);
shell/ev-progress-message-area.c:197:	gtk_progress_bar_set_fraction (GTK_PROGRESS_BAR (area->priv->progress_bar),
shell/ev-zoom-action.c:47:        g_object_get (zoom_widget, "popup-shown", &zoom_action->priv->popup_shown, NULL);
shell/ev-zoom-action.c:65:                ev_zoom_action_widget_set_model (zoom_widget, zoom_action->priv->model);
shell/ev-zoom-action.c:66:                ev_zoom_action_widget_set_window (zoom_widget, zoom_action->priv->window);
shell/ev-zoom-action.c:113:        if (action->priv->model == model)
shell/ev-zoom-action.c:116:        action->priv->model = model;
shell/ev-zoom-action.c:134:        if (action->priv->window == window)
shell/ev-zoom-action.c:137:        action->priv->window = window;
shell/ev-zoom-action.c:150:        return action->priv->popup_shown;
shell/ev-sidebar-attachments.c:92:	g_hash_table_insert (ev_attachbar->priv->icon_cache,
shell/ev-sidebar-attachments.c:135:	pixbuf = g_hash_table_lookup (ev_attachbar->priv->icon_cache,
shell/ev-sidebar-attachments.c:141:	pixbuf = icon_theme_get_pixbuf_from_mime_type (ev_attachbar->priv->icon_theme,
shell/ev-sidebar-attachments.c:159:	pixbuf = icon_theme_get_pixbuf_from_mime_type (ev_attachbar->priv->icon_theme,
shell/ev-sidebar-attachments.c:172:	g_hash_table_foreach_remove (ev_attachbar->priv->icon_cache,
shell/ev-sidebar-attachments.c:186:	path = gtk_icon_view_get_path_at_pos (GTK_ICON_VIEW (ev_attachbar->priv->icon_view),
shell/ev-sidebar-attachments.c:192:	gtk_tree_model_get_iter (GTK_TREE_MODEL (ev_attachbar->priv->model),
shell/ev-sidebar-attachments.c:194:	gtk_tree_model_get (GTK_TREE_MODEL (ev_attachbar->priv->model), &iter,
shell/ev-sidebar-attachments.c:198:	gtk_icon_view_select_path (GTK_ICON_VIEW (ev_attachbar->priv->icon_view),
shell/ev-sidebar-attachments.c:216:	icon_view = GTK_ICON_VIEW (ev_attachbar->priv->icon_view);
shell/ev-sidebar-attachments.c:239:		gtk_tree_model_get_iter (GTK_TREE_MODEL (ev_attachbar->priv->model),
shell/ev-sidebar-attachments.c:241:		gtk_tree_model_get (GTK_TREE_MODEL (ev_attachbar->priv->model), &iter,
shell/ev-sidebar-attachments.c:328:		GTK_TREE_MODEL (ev_attachbar->priv->model),
shell/ev-sidebar-attachments.c:336:		gtk_tree_model_get (GTK_TREE_MODEL (ev_attachbar->priv->model), &iter,
shell/ev-sidebar-attachments.c:348:		gtk_list_store_set (ev_attachbar->priv->model, &iter,
shell/ev-sidebar-attachments.c:353:			GTK_TREE_MODEL (ev_attachbar->priv->model),
shell/ev-sidebar-attachments.c:365:	if (!ev_attachbar->priv->icon_theme)
shell/ev-sidebar-attachments.c:379:	ev_attachbar->priv->icon_theme = gtk_icon_theme_get_for_screen (screen);
shell/ev-sidebar-attachments.c:380:	g_signal_connect_swapped (ev_attachbar->priv->icon_theme,
shell/ev-sidebar-attachments.c:403:	selected = gtk_icon_view_get_selected_items (GTK_ICON_VIEW (ev_attachbar->priv->icon_view));
shell/ev-sidebar-attachments.c:419:		gtk_tree_model_get_iter (GTK_TREE_MODEL (ev_attachbar->priv->model),
shell/ev-sidebar-attachments.c:421:		gtk_tree_model_get (GTK_TREE_MODEL (ev_attachbar->priv->model), &iter,
shell/ev-sidebar-attachments.c:467:			g_value_set_object (value, ev_sidebar_attachments->priv->icon_view);
shell/ev-sidebar-attachments.c:480:	if (ev_attachbar->priv->icon_theme) {
shell/ev-sidebar-attachments.c:482:			ev_attachbar->priv->icon_theme, 
shell/ev-sidebar-attachments.c:485:		ev_attachbar->priv->icon_theme = NULL;
shell/ev-sidebar-attachments.c:488:	if (ev_attachbar->priv->model) {
shell/ev-sidebar-attachments.c:489:		g_object_unref (ev_attachbar->priv->model);
shell/ev-sidebar-attachments.c:490:		ev_attachbar->priv->model = NULL;
shell/ev-sidebar-attachments.c:493:	if (ev_attachbar->priv->icon_cache) {
shell/ev-sidebar-attachments.c:494:		g_hash_table_destroy (ev_attachbar->priv->icon_cache);
shell/ev-sidebar-attachments.c:495:		ev_attachbar->priv->icon_cache = NULL;
shell/ev-sidebar-attachments.c:547:	ev_attachbar->priv->model = gtk_list_store_new (N_COLS,
shell/ev-sidebar-attachments.c:554:	ev_attachbar->priv->icon_view =
shell/ev-sidebar-attachments.c:555:		gtk_icon_view_new_with_model (GTK_TREE_MODEL (ev_attachbar->priv->model));
shell/ev-sidebar-attachments.c:556:	gtk_icon_view_set_selection_mode (GTK_ICON_VIEW (ev_attachbar->priv->icon_view),
shell/ev-sidebar-attachments.c:558:	gtk_icon_view_set_columns (GTK_ICON_VIEW (ev_attachbar->priv->icon_view), -1);
shell/ev-sidebar-attachments.c:559:	g_object_set (G_OBJECT (ev_attachbar->priv->icon_view),
shell/ev-sidebar-attachments.c:563:	g_signal_connect_swapped (ev_attachbar->priv->icon_view,
shell/ev-sidebar-attachments.c:569:			   ev_attachbar->priv->icon_view);
shell/ev-sidebar-attachments.c:575:	ev_attachbar->priv->icon_theme = NULL;
shell/ev-sidebar-attachments.c:578:	ev_attachbar->priv->icon_cache = g_hash_table_new_full (g_str_hash,
shell/ev-sidebar-attachments.c:585:		GTK_ICON_VIEW (ev_attachbar->priv->icon_view),
shell/ev-sidebar-attachments.c:589:        gtk_drag_source_add_uri_targets (ev_attachbar->priv->icon_view);
shell/ev-sidebar-attachments.c:591:	g_signal_connect (ev_attachbar->priv->icon_view,
shell/ev-sidebar-attachments.c:627:		gtk_list_store_append (ev_attachbar->priv->model, &iter);
shell/ev-sidebar-attachments.c:628:		gtk_list_store_set (ev_attachbar->priv->model, &iter,
shell/ev-sidebar-attachments.c:653:	if (!ev_attachbar->priv->icon_theme) {
shell/ev-sidebar-attachments.c:657:		ev_attachbar->priv->icon_theme = gtk_icon_theme_get_for_screen (screen);
shell/ev-sidebar-attachments.c:658:		g_signal_connect_swapped (ev_attachbar->priv->icon_theme,
shell/ev-sidebar-attachments.c:664:	gtk_list_store_clear (ev_attachbar->priv->model);
shell/ev-daemon-gdbus-generated.c:858:  g_datalist_clear (&proxy->priv->qdata);
shell/ev-daemon-gdbus-generated.c:934:      g_datalist_remove_data (&proxy->priv->qdata, key);
shell/ev-daemon-gdbus-generated.c:942:      g_datalist_remove_data (&proxy->priv->qdata, invalidated_properties[n]);
shell/ev-daemon-gdbus-generated.c:1392:  g_list_free_full (skeleton->priv->changed_properties, (GDestroyNotify) _changed_property_free);
shell/ev-daemon-gdbus-generated.c:1393:  if (skeleton->priv->changed_properties_idle_source != NULL)
shell/ev-daemon-gdbus-generated.c:1394:    g_source_destroy (skeleton->priv->changed_properties_idle_source);
shell/ev-daemon-gdbus-generated.c:1395:  g_main_context_unref (skeleton->priv->context);
shell/ev-daemon-gdbus-generated.c:1396:  g_mutex_clear (&skeleton->priv->lock);
shell/ev-daemon-gdbus-generated.c:1409:  g_mutex_init (&skeleton->priv->lock);
shell/ev-daemon-gdbus-generated.c:1410:  skeleton->priv->context = g_main_context_ref_thread_default ();
shell/ev-sidebar-bookmarks.c:108:        selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (priv->tree_view));
shell/ev-sidebar-bookmarks.c:110:        ev_document_model_set_page (priv->model, page);
shell/ev-sidebar-bookmarks.c:118:        GtkTreeView               *tree_view = GTK_TREE_VIEW (priv->tree_view);
shell/ev-sidebar-bookmarks.c:145:        selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (priv->tree_view));
shell/ev-sidebar-bookmarks.c:149:        ev_bookmarks_delete (priv->bookmarks, &bm);
shell/ev-sidebar-bookmarks.c:180:        model = GTK_LIST_STORE (gtk_tree_view_get_model (GTK_TREE_VIEW (priv->tree_view)));
shell/ev-sidebar-bookmarks.c:183:        if (!priv->bookmarks) {
shell/ev-sidebar-bookmarks.c:184:                g_object_set (priv->tree_view, "has-tooltip", FALSE, NULL);
shell/ev-sidebar-bookmarks.c:188:        items = ev_bookmarks_get_bookmarks (priv->bookmarks);
shell/ev-sidebar-bookmarks.c:200:        g_object_set (priv->tree_view, "has-tooltip", TRUE, NULL);
shell/ev-sidebar-bookmarks.c:219:                ev_document_model_set_page (priv->model, page);
shell/ev-sidebar-bookmarks.c:220:                gtk_widget_set_sensitive (priv->del_button, TRUE);
shell/ev-sidebar-bookmarks.c:222:                gtk_widget_set_sensitive (priv->del_button, FALSE);
shell/ev-sidebar-bookmarks.c:245:        selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (priv->tree_view));
shell/ev-sidebar-bookmarks.c:252:        ev_bookmarks_delete (priv->bookmarks, &bm);
shell/ev-sidebar-bookmarks.c:271:        model = gtk_tree_view_get_model (GTK_TREE_VIEW (priv->tree_view));
shell/ev-sidebar-bookmarks.c:280:        ev_bookmarks_update (priv->bookmarks, &bm);
shell/ev-sidebar-bookmarks.c:300:        model = gtk_tree_view_get_model (GTK_TREE_VIEW (priv->tree_view));
shell/ev-sidebar-bookmarks.c:301:        if (!gtk_tree_view_get_tooltip_context (GTK_TREE_VIEW (priv->tree_view),
shell/ev-sidebar-bookmarks.c:310:        document = ev_document_model_get_document (priv->model);
shell/ev-sidebar-bookmarks.c:317:        gtk_tree_view_set_tooltip_row (GTK_TREE_VIEW (priv->tree_view),
shell/ev-sidebar-bookmarks.c:331:        GtkTreeView               *tree_view = GTK_TREE_VIEW (sidebar_bookmarks->priv->tree_view);
shell/ev-sidebar-bookmarks.c:353:        if (!priv->popup)
shell/ev-sidebar-bookmarks.c:354:                priv->popup = gtk_ui_manager_get_widget (priv->ui_manager, "/BookmarksPopup");
shell/ev-sidebar-bookmarks.c:356:        gtk_menu_popup (GTK_MENU (priv->popup),
shell/ev-sidebar-bookmarks.c:392:        if (priv->model) {
shell/ev-sidebar-bookmarks.c:393:                g_object_unref (priv->model);
shell/ev-sidebar-bookmarks.c:394:                priv->model = NULL;
shell/ev-sidebar-bookmarks.c:397:        if (priv->bookmarks) {
shell/ev-sidebar-bookmarks.c:398:                g_object_unref (priv->bookmarks);
shell/ev-sidebar-bookmarks.c:399:                priv->bookmarks = NULL;
shell/ev-sidebar-bookmarks.c:402:        if (priv->action_group) {
shell/ev-sidebar-bookmarks.c:403:                g_object_unref (priv->action_group);
shell/ev-sidebar-bookmarks.c:404:                priv->action_group = NULL;
shell/ev-sidebar-bookmarks.c:407:        if (priv->ui_manager) {
shell/ev-sidebar-bookmarks.c:408:                g_object_unref (priv->ui_manager);
shell/ev-sidebar-bookmarks.c:409:                priv->ui_manager = NULL;
shell/ev-sidebar-bookmarks.c:439:        priv->tree_view = gtk_tree_view_new_with_model (GTK_TREE_MODEL (model));
shell/ev-sidebar-bookmarks.c:441:        g_signal_connect (priv->tree_view, "query-tooltip",
shell/ev-sidebar-bookmarks.c:444:        g_signal_connect (priv->tree_view,
shell/ev-sidebar-bookmarks.c:448:        gtk_tree_view_set_headers_visible (GTK_TREE_VIEW (priv->tree_view), FALSE);
shell/ev-sidebar-bookmarks.c:449:        selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (priv->tree_view));
shell/ev-sidebar-bookmarks.c:462:        gtk_tree_view_insert_column_with_attributes (GTK_TREE_VIEW (priv->tree_view),
shell/ev-sidebar-bookmarks.c:466:        gtk_container_add (GTK_CONTAINER (swindow), priv->tree_view);
shell/ev-sidebar-bookmarks.c:467:        gtk_widget_show (priv->tree_view);
shell/ev-sidebar-bookmarks.c:471:        priv->add_button = gtk_button_new_from_stock (GTK_STOCK_ADD);
shell/ev-sidebar-bookmarks.c:472:        g_signal_connect (priv->add_button, "clicked",
shell/ev-sidebar-bookmarks.c:475:        gtk_widget_set_sensitive (priv->add_button, FALSE);
shell/ev-sidebar-bookmarks.c:476:        gtk_box_pack_start (GTK_BOX (hbox), priv->add_button, TRUE, TRUE, 6);
shell/ev-sidebar-bookmarks.c:477:        gtk_widget_show (priv->add_button);
shell/ev-sidebar-bookmarks.c:479:        priv->del_button = gtk_button_new_from_stock (GTK_STOCK_REMOVE);
shell/ev-sidebar-bookmarks.c:480:        g_signal_connect (priv->del_button, "clicked",
shell/ev-sidebar-bookmarks.c:483:        gtk_widget_set_sensitive (priv->del_button, FALSE);
shell/ev-sidebar-bookmarks.c:484:        gtk_box_pack_start (GTK_BOX (hbox), priv->del_button, TRUE, TRUE, 6);
shell/ev-sidebar-bookmarks.c:485:        gtk_widget_show (priv->del_button);
shell/ev-sidebar-bookmarks.c:492:        priv->action_group = gtk_action_group_new ("BookmarsPopupActions");
shell/ev-sidebar-bookmarks.c:493:        gtk_action_group_set_translation_domain (priv->action_group, NULL);
shell/ev-sidebar-bookmarks.c:494:        gtk_action_group_add_actions (priv->action_group, popup_entries,
shell/ev-sidebar-bookmarks.c:497:        priv->ui_manager = gtk_ui_manager_new ();
shell/ev-sidebar-bookmarks.c:498:        gtk_ui_manager_insert_action_group (priv->ui_manager,
shell/ev-sidebar-bookmarks.c:499:                                            priv->action_group, 0);
shell/ev-sidebar-bookmarks.c:500:        gtk_ui_manager_add_ui_from_string (priv->ui_manager, popup_menu_ui, -1, NULL);
shell/ev-sidebar-bookmarks.c:515:                g_value_set_object (value, sidebar_bookmarks->priv->tree_view);
shell/ev-sidebar-bookmarks.c:565:        if (priv->bookmarks == bookmarks)
shell/ev-sidebar-bookmarks.c:568:        if (priv->bookmarks)
shell/ev-sidebar-bookmarks.c:569:                g_object_unref (priv->bookmarks);
shell/ev-sidebar-bookmarks.c:570:        priv->bookmarks = g_object_ref (bookmarks);
shell/ev-sidebar-bookmarks.c:571:        g_signal_connect (priv->bookmarks, "changed",
shell/ev-sidebar-bookmarks.c:575:        gtk_widget_set_sensitive (priv->add_button, TRUE);
shell/ev-sidebar-bookmarks.c:587:        if (priv->model == model)
shell/ev-sidebar-bookmarks.c:590:        if (priv->model)
shell/ev-sidebar-bookmarks.c:591:                g_object_unref (priv->model);
shell/ev-sidebar-bookmarks.c:592:        priv->model = g_object_ref (model);
shell/ev-sidebar-links.c:126:		g_value_set_object (value, ev_sidebar_links->priv->model);
shell/ev-sidebar-links.c:129:		g_value_set_object (value, ev_sidebar_links->priv->tree_view);
shell/ev-sidebar-links.c:142:	if (sidebar->priv->job) {
shell/ev-sidebar-links.c:143:		g_signal_handlers_disconnect_by_func (sidebar->priv->job,
shell/ev-sidebar-links.c:145:		ev_job_cancel (sidebar->priv->job);						      
shell/ev-sidebar-links.c:146:		g_object_unref (sidebar->priv->job);
shell/ev-sidebar-links.c:147:		sidebar->priv->job = NULL;
shell/ev-sidebar-links.c:150:	if (sidebar->priv->model) {
shell/ev-sidebar-links.c:151:		g_object_unref (sidebar->priv->model);
shell/ev-sidebar-links.c:152:		sidebar->priv->model = NULL;
shell/ev-sidebar-links.c:155:	if (sidebar->priv->document) {
shell/ev-sidebar-links.c:156:		g_object_unref (sidebar->priv->document);
shell/ev-sidebar-links.c:157:		sidebar->priv->document = NULL;
shell/ev-sidebar-links.c:158:		sidebar->priv->doc_model = NULL;
shell/ev-sidebar-links.c:173:	if (links->priv->model) {
shell/ev-sidebar-links.c:175:						   ev_document_model_get_page (links->priv->doc_model));
shell/ev-sidebar-links.c:224:	g_return_if_fail (ev_sidebar_links->priv->document != NULL);
shell/ev-sidebar-links.c:236:		g_signal_handler_block (ev_sidebar_links->priv->doc_model,
shell/ev-sidebar-links.c:237:					ev_sidebar_links->priv->page_changed_id);
shell/ev-sidebar-links.c:239:		g_signal_handler_unblock (ev_sidebar_links->priv->doc_model,
shell/ev-sidebar-links.c:240:					  ev_sidebar_links->priv->page_changed_id);
shell/ev-sidebar-links.c:281:		(GTK_TREE_VIEW (sidebar->priv->tree_view));
shell/ev-sidebar-links.c:295:		document_links = EV_DOCUMENT_LINKS (sidebar->priv->document);
shell/ev-sidebar-links.c:316:			last_page = ev_document_get_n_pages (sidebar->priv->document);
shell/ev-sidebar-links.c:320:			last_page = ev_document_get_n_pages (sidebar->priv->document);
shell/ev-sidebar-links.c:353:			sidebar->priv->tree_view, 0,
shell/ev-sidebar-links.c:405:	priv->tree_view = gtk_tree_view_new_with_model (loading_model);
shell/ev-sidebar-links.c:408:	selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (priv->tree_view));
shell/ev-sidebar-links.c:410:	gtk_tree_view_set_headers_visible (GTK_TREE_VIEW (priv->tree_view), FALSE);
shell/ev-sidebar-links.c:411:	gtk_container_add (GTK_CONTAINER (swindow), priv->tree_view);
shell/ev-sidebar-links.c:418:	gtk_tree_view_append_column (GTK_TREE_VIEW (priv->tree_view), column);
shell/ev-sidebar-links.c:430:	gtk_tree_view_append_column (GTK_TREE_VIEW (priv->tree_view), column);
shell/ev-sidebar-links.c:444:	g_signal_connect (priv->tree_view,
shell/ev-sidebar-links.c:448:	g_signal_connect (priv->tree_view,
shell/ev-sidebar-links.c:492:		EvDocumentLinks *document_links = EV_DOCUMENT_LINKS (sidebar_links->priv->document);
shell/ev-sidebar-links.c:497:		current_page = ev_document_model_get_page (sidebar_links->priv->doc_model);
shell/ev-sidebar-links.c:500:			gtk_tree_view_expand_to_path (GTK_TREE_VIEW (sidebar_links->priv->tree_view),
shell/ev-sidebar-links.c:502:			gtk_tree_view_set_cursor (GTK_TREE_VIEW (sidebar_links->priv->tree_view),
shell/ev-sidebar-links.c:524:	selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (sidebar_links->priv->tree_view));
shell/ev-sidebar-links.c:534:			EvDocumentLinks *document_links = EV_DOCUMENT_LINKS (sidebar_links->priv->document);
shell/ev-sidebar-links.c:549:	g_signal_handler_block (selection, sidebar_links->priv->selection_id);
shell/ev-sidebar-links.c:550:	g_signal_handler_block (sidebar_links->priv->tree_view, sidebar_links->priv->row_activated_id);
shell/ev-sidebar-links.c:556:	g_signal_handler_unblock (selection, sidebar_links->priv->selection_id);
shell/ev-sidebar-links.c:557:	g_signal_handler_unblock (sidebar_links->priv->tree_view, sidebar_links->priv->row_activated_id);
shell/ev-sidebar-links.c:611:	if (priv->model == model)
shell/ev-sidebar-links.c:614:	if (priv->model)
shell/ev-sidebar-links.c:615:		g_object_unref (priv->model);
shell/ev-sidebar-links.c:616:	priv->model = g_object_ref (model);
shell/ev-sidebar-links.c:630:	gtk_tree_view_set_model (GTK_TREE_VIEW (priv->tree_view), job->model);
shell/ev-sidebar-links.c:633:	priv->job = NULL;
shell/ev-sidebar-links.c:635:	expand_open_links (GTK_TREE_VIEW (priv->tree_view), priv->model, NULL);
shell/ev-sidebar-links.c:637:	selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (priv->tree_view));
shell/ev-sidebar-links.c:640:	if (priv->selection_id <= 0) {
shell/ev-sidebar-links.c:641:		priv->selection_id =
shell/ev-sidebar-links.c:646:	priv->page_changed_id =
shell/ev-sidebar-links.c:647:		g_signal_connect_swapped (priv->doc_model, "page-changed",
shell/ev-sidebar-links.c:650:	if (priv->row_activated_id <= 0) {
shell/ev-sidebar-links.c:651:		priv->row_activated_id =
shell/ev-sidebar-links.c:652:			g_signal_connect (priv->tree_view, "row-activated",
shell/ev-sidebar-links.c:658:					   ev_document_model_get_page (priv->doc_model));
shell/ev-sidebar-links.c:675:	if (priv->document) {
shell/ev-sidebar-links.c:676:		gtk_tree_view_set_model (GTK_TREE_VIEW (priv->tree_view), NULL);
shell/ev-sidebar-links.c:677:		g_object_unref (priv->document);
shell/ev-sidebar-links.c:680:	priv->document = g_object_ref (document);
shell/ev-sidebar-links.c:682:	if (priv->job) {
shell/ev-sidebar-links.c:683:		g_signal_handlers_disconnect_by_func (priv->job,
shell/ev-sidebar-links.c:686:		g_object_unref (priv->job);
shell/ev-sidebar-links.c:689:	priv->job = ev_job_links_new (document);
shell/ev-sidebar-links.c:690:	g_signal_connect (priv->job,
shell/ev-sidebar-links.c:695:	ev_job_scheduler_push_job (priv->job, EV_JOB_PRIORITY_NONE);
shell/ev-sidebar-links.c:705:	if (priv->doc_model == model)
shell/ev-sidebar-links.c:708:	priv->doc_model = model;
shell/ev-toolbar.c:57:                ev_toolbar->priv->window = g_value_get_object (value);
shell/ev-toolbar.c:176:        action_group = ev_window_get_main_action_group (ev_toolbar->priv->window);
shell/ev-toolbar.c:177:        ui_manager = ev_window_get_ui_manager (ev_toolbar->priv->window);
shell/ev-toolbar.c:241:        ev_toolbar->priv->view_menu_button = button;
shell/ev-toolbar.c:254:        ev_toolbar->priv->action_menu_button = button;
shell/ev-toolbar.c:312:        popup_menu = gtk_menu_button_get_popup (GTK_MENU_BUTTON (priv->view_menu_button));
shell/ev-toolbar.c:316:        popup_menu = gtk_menu_button_get_popup (GTK_MENU_BUTTON (priv->action_menu_button));
shell/ev-toolbar.c:320:        action_group = ev_window_get_main_action_group (ev_toolbar->priv->window);
shell/ev-toolbar.c:337:        gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (ev_toolbar->priv->action_menu_button),
shell/eggfindbar.c:265:  if (find_bar->priv->search_string != NULL)
shell/eggfindbar.c:275:  if (find_bar->priv->whole_words_only_enabled)
shell/eggfindbar.c:282:                                      find_bar->priv->whole_words_only);
shell/eggfindbar.c:287:  if (find_bar->priv->case_sensitive_enabled)
shell/eggfindbar.c:294:                                      find_bar->priv->case_sensitive);
shell/eggfindbar.c:309:  if (!find_bar->priv->case_sensitive_enabled &&
shell/eggfindbar.c:310:      !find_bar->priv->whole_words_only_enabled)
shell/eggfindbar.c:329:  if (!find_bar->priv->case_sensitive_enabled &&
shell/eggfindbar.c:330:      !find_bar->priv->whole_words_only_enabled)
shell/eggfindbar.c:368:  priv->search_string = NULL;
shell/eggfindbar.c:378:  priv->find_entry = gtk_entry_new ();
shell/eggfindbar.c:379:  gtk_entry_set_width_chars (GTK_ENTRY (priv->find_entry), 32);
shell/eggfindbar.c:380:  gtk_entry_set_max_length (GTK_ENTRY (priv->find_entry), 512);
shell/eggfindbar.c:383:  gtk_entry_set_icon_from_icon_name (GTK_ENTRY (priv->find_entry),
shell/eggfindbar.c:386:  gtk_entry_set_icon_activatable (GTK_ENTRY (priv->find_entry),
shell/eggfindbar.c:389:  gtk_entry_set_icon_tooltip_text (GTK_ENTRY (priv->find_entry),
shell/eggfindbar.c:393:  gtk_box_pack_start (GTK_BOX (box), priv->find_entry, TRUE, TRUE, 0);
shell/eggfindbar.c:394:  gtk_widget_show (priv->find_entry);
shell/eggfindbar.c:397:  priv->previous_button = gtk_button_new ();
shell/eggfindbar.c:398:  gtk_button_set_image (GTK_BUTTON (priv->previous_button),
shell/eggfindbar.c:400:  gtk_widget_set_tooltip_text (priv->previous_button, _("Find previous occurrence of the search string"));
shell/eggfindbar.c:401:  gtk_widget_set_can_focus (priv->previous_button, FALSE);
shell/eggfindbar.c:402:  gtk_widget_set_sensitive (priv->previous_button, FALSE);
shell/eggfindbar.c:403:  gtk_container_add (GTK_CONTAINER (box), priv->previous_button);
shell/eggfindbar.c:404:  gtk_widget_show (priv->previous_button);
shell/eggfindbar.c:407:  priv->next_button = gtk_button_new ();
shell/eggfindbar.c:408:  gtk_button_set_image (GTK_BUTTON (priv->next_button),
shell/eggfindbar.c:410:  gtk_widget_set_tooltip_text (priv->next_button, _("Find next occurrence of the search string"));
shell/eggfindbar.c:411:  gtk_widget_set_can_focus (priv->next_button, FALSE);
shell/eggfindbar.c:412:  gtk_widget_set_sensitive (priv->next_button, FALSE);
shell/eggfindbar.c:413:  gtk_container_add (GTK_CONTAINER (box), priv->next_button);
shell/eggfindbar.c:414:  gtk_widget_show (priv->next_button);
shell/eggfindbar.c:425:  priv->status_item = gtk_tool_item_new();
shell/eggfindbar.c:426:  gtk_tool_item_set_expand (priv->status_item, TRUE);
shell/eggfindbar.c:427:  priv->status_label = gtk_label_new (NULL);
shell/eggfindbar.c:428:  gtk_label_set_ellipsize (GTK_LABEL (priv->status_label),
shell/eggfindbar.c:430:  gtk_misc_set_alignment (GTK_MISC (priv->status_label), 0.0, 0.5);
shell/eggfindbar.c:431:  gtk_container_add (GTK_CONTAINER (priv->status_item), priv->status_label);
shell/eggfindbar.c:432:  gtk_widget_show (priv->status_label);
shell/eggfindbar.c:433:  gtk_container_add (GTK_CONTAINER (find_bar), GTK_WIDGET (priv->status_item));
shell/eggfindbar.c:435:  g_signal_connect (priv->find_entry, "changed",
shell/eggfindbar.c:438:  g_signal_connect (priv->find_entry, "activate",
shell/eggfindbar.c:441:  g_signal_connect (priv->find_entry, "icon-release",
shell/eggfindbar.c:444:  g_signal_connect (priv->find_entry, "populate-popup",
shell/eggfindbar.c:447:  g_signal_connect (priv->next_button, "clicked",
shell/eggfindbar.c:450:  g_signal_connect (priv->previous_button, "clicked",
shell/eggfindbar.c:461:  g_free (priv->search_string);
shell/eggfindbar.c:503:      g_value_set_string (value, priv->search_string);
shell/eggfindbar.c:506:      g_value_set_boolean (value, priv->case_sensitive);
shell/eggfindbar.c:509:      g_value_set_boolean (value, priv->whole_words_only);
shell/eggfindbar.c:523:  gtk_widget_grab_focus (priv->find_entry);
shell/eggfindbar.c:565:  if (priv->search_string != search_string)
shell/eggfindbar.c:569:      old = priv->search_string;
shell/eggfindbar.c:586:          priv->search_string = g_strdup (search_string);
shell/eggfindbar.c:589:          gtk_entry_set_text (GTK_ENTRY (priv->find_entry),
shell/eggfindbar.c:590:                              priv->search_string ?
shell/eggfindbar.c:591:                              priv->search_string :
shell/eggfindbar.c:596:          gtk_widget_set_sensitive (GTK_WIDGET (find_bar->priv->next_button), not_empty);
shell/eggfindbar.c:597:          gtk_widget_set_sensitive (GTK_WIDGET (find_bar->priv->previous_button), not_empty);
shell/eggfindbar.c:626:  return priv->search_string ? priv->search_string : "";
shell/eggfindbar.c:650:  if (priv->case_sensitive != case_sensitive)
shell/eggfindbar.c:652:      priv->case_sensitive = case_sensitive;
shell/eggfindbar.c:677:  if (!priv->case_sensitive_enabled)
shell/eggfindbar.c:680:  return priv->case_sensitive;
shell/eggfindbar.c:698:  priv->case_sensitive_enabled = !!enable;
shell/eggfindbar.c:720:  if (priv->whole_words_only != whole_words_only)
shell/eggfindbar.c:722:      priv->whole_words_only = whole_words_only;
shell/eggfindbar.c:745:  if (!priv->whole_words_only_enabled)
shell/eggfindbar.c:748:  return priv->whole_words_only;
shell/eggfindbar.c:766:  priv->whole_words_only_enabled = !!enable;
shell/eggfindbar.c:790:  current_text = gtk_label_get_text (GTK_LABEL (priv->status_label));
shell/eggfindbar.c:793:	  gtk_label_set_text (GTK_LABEL (priv->status_label), text);
shell/eggfindbar.c:795:  g_object_set (priv->status_item, "visible", text != NULL && *text !='\0', NULL);
shell/ev-history-action-widget.c:70:                g_value_set_boolean (value, history_widget->priv->popup_shown);
shell/ev-history-action-widget.c:82:        if (history_widget->priv->popup_shown == popup_shown)
shell/ev-history-action-widget.c:85:        history_widget->priv->popup_shown = popup_shown;
shell/ev-history-action-widget.c:99:        ev_history_go_to_link (history_widget->priv->history, link);
shell/ev-history-action-widget.c:121:                list = ev_history_get_back_list (history_widget->priv->history);
shell/ev-history-action-widget.c:124:                list = ev_history_get_forward_list (history_widget->priv->history);
shell/ev-history-action-widget.c:163:        if (button == priv->back_button)
shell/ev-history-action-widget.c:164:                ev_history_go_back (priv->history);
shell/ev-history-action-widget.c:165:        else if (button == priv->forward_button)
shell/ev-history-action-widget.c:166:                ev_history_go_forward (priv->history);
shell/ev-history-action-widget.c:180:                                                     button == priv->back_button ?
shell/ev-history-action-widget.c:260:        priv->back_button = ev_history_action_widget_create_button (history_widget,
shell/ev-history-action-widget.c:262:        gtk_container_add (GTK_CONTAINER (box), priv->back_button);
shell/ev-history-action-widget.c:263:        gtk_widget_show (priv->back_button);
shell/ev-history-action-widget.c:265:        priv->forward_button = ev_history_action_widget_create_button (history_widget,
shell/ev-history-action-widget.c:267:        gtk_container_add (GTK_CONTAINER (box), priv->forward_button);
shell/ev-history-action-widget.c:268:        gtk_widget_show (priv->forward_button);
shell/ev-history-action-widget.c:273:        gtk_widget_set_sensitive (priv->back_button, FALSE);
shell/ev-history-action-widget.c:274:        gtk_widget_set_sensitive (priv->forward_button, FALSE);
shell/ev-history-action-widget.c:303:        gtk_widget_set_sensitive (priv->back_button, ev_history_can_go_back (history));
shell/ev-history-action-widget.c:304:        gtk_widget_set_sensitive (priv->forward_button, ev_history_can_go_forward (history));
shell/ev-history-action-widget.c:313:        if (history_widget->priv->history == history)
shell/ev-history-action-widget.c:316:        if (history_widget->priv->history) {
shell/ev-history-action-widget.c:317:                g_object_remove_weak_pointer (G_OBJECT (history_widget->priv->history),
shell/ev-history-action-widget.c:318:                                              (gpointer)&history_widget->priv->history);
shell/ev-history-action-widget.c:319:                g_signal_handlers_disconnect_by_func (history_widget->priv->history,
shell/ev-history-action-widget.c:324:        history_widget->priv->history = history;
shell/ev-history-action-widget.c:329:                                   (gpointer)&history_widget->priv->history);
